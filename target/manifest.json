{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.6", "generated_at": "2023-06-06T16:15:32.974216Z", "invocation_id": "2a12b54e-dc8c-4608-8ff3-5d85214c5df5", "env": {}, "project_id": "bab27186cadf9764c6deca1ef091e88e", "user_id": "e62c7933-d2ca-4259-ac93-5fab3b5f7c9c", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.bt_21_real_time.stg_customers_retail": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "stg_customers_retail", "resource_type": "model", "package_name": "bt_21_real_time", "path": "staging/stg_customers_retail.sql", "original_file_path": "models/staging/stg_customers_retail.sql", "unique_id": "model.bt_21_real_time.stg_customers_retail", "fqn": ["bt_21_real_time", "staging", "stg_customers_retail"], "alias": "stg_customers_retail", "checksum": {"name": "sha256", "checksum": "146e914262d7174b6073dba71897769e6769a13e2f1ebb4fbee6b12d6531a185"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["pii"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": ["pii"], "description": "", "columns": {"customerid": {"name": "customerid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "org": {"name": "org", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bt_21_real_time://models/bt_backend_data.yml", "build_path": "target/run/bt_21_real_time/models/staging/stg_customers_retail.sql", "deferred": false, "unrendered_config": {"materialized": "table", "tags": ["pii"]}, "created_at": 1686068133.8220747, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.stg_customers_retail", "raw_code": "with \n\nselected as (\nselect\n    org,\n    customerid,\n    COALESCE(location::numeric,0)::int  as location,\n    regexp_replace(left(lastname,100),'([^[:ascii:]])', '') as lastname,\n    regexp_replace(left(firstname,100),'([^[:ascii:]])', '') as firstname ,\n    -- case when to handle combining date of birth info ?\n    date(Case when birthday = '' or birthmonth = '' or birthyear = '' then Null\n            when birthmonth::int > 12 or birthyear::int > 2023 or birthday::int > 31 or  birthyear::int < 1920 then null\n            WHEN birthmonth::int <= 0 THEN ('01/01/'||birthyear)::date\n            When birthday::int >= 29 or birthday::int <=0 THEN (birthmonth||'/01/'||birthyear)::date\n            WHEN birthmonth::int <= 0  THEN ('01/'||birthday||'/'||birthyear)::date\n            ELSE (birthmonth||'/'||birthday||'/'||birthyear)::date\n    END) as dob,\n    regexp_replace(Left(phone,20), '([^[:ascii:]])', '') as phone,\n    regexp_replace(left(address1,100), '([^[:ascii:]])', '') as address1,\n    regexp_replace(left(address2,100), '([^[:ascii:]])', '') as address2,\n    regexp_replace(left(city,50), '([^[:ascii:]])', '') as city,\n    regexp_replace(left(state,25), '([^[:ascii:]])', '') as state,\n    regexp_replace(left(zip,20), '([^[:ascii:]])', '') as zip,\n    regexp_replace(left(email,50), '([^[:ascii:]])', '') as email,\n    regexp_replace(left(cell,25), '([^[:ascii:]])', '') as cell,\n    null as  createddate,\n    visits,\n    amountspent,\n    case when deleted is null then (0::smallint)::int::boolean else (deleted::smallint)::int::boolean END as deleted ,\n    to_timestamp(membersince)  as membersince,\n    case when iscaregiver is null then (0::smallint)::int::boolean else (iscaregiver::smallint)::int::boolean END as iscaregiver,\n    CASE when ismember = 1 then 1 when points > 0 then 1 else 0 end as ismember,\n    regexp_replace(redcard, '([^[:ascii:]])', '') as mmj,\n    resolved_gender as gender,\n    modified as modified ,\n    -- time of record creation\n    created,\n    CONCAT(10, '~', org, '~', location,'~',customerid) AS customer_primary_key, --NEED to refactor to account for ORG ID\n    --rank by unique columns (this table should be unique)\n    ROW_NUMBER() OVER (PARTITION BY customerid, org, location ORDER BY created DESC) rank,\n    birthyear,\n    resolved_gender as sex,\n    case when birthyear is null  then 0 when birthyear = '' then 0 else (cast( EXTRACT( YEAR FROM current_timestamp()) as int) - Cast(birthyear as int)) end as Age,\n    --DEI-236\n    current_timestamp() as extract_date\nfrom postgres_cann_replication_public.customers_raw where _fivetran_deleted = false\n)\n\nselect * from selected where rank = 1", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/bt_21_real_time/models/staging/stg_customers_retail.sql", "compiled": true, "compiled_code": "with \n\nselected as (\nselect\n    org,\n    customerid,\n    COALESCE(location::numeric,0)::int  as location,\n    regexp_replace(left(lastname,100),'([^[:ascii:]])', '') as lastname,\n    regexp_replace(left(firstname,100),'([^[:ascii:]])', '') as firstname ,\n    -- case when to handle combining date of birth info ?\n    date(Case when birthday = '' or birthmonth = '' or birthyear = '' then Null\n            when birthmonth::int > 12 or birthyear::int > 2023 or birthday::int > 31 or  birthyear::int < 1920 then null\n            WHEN birthmonth::int <= 0 THEN ('01/01/'||birthyear)::date\n            When birthday::int >= 29 or birthday::int <=0 THEN (birthmonth||'/01/'||birthyear)::date\n            WHEN birthmonth::int <= 0  THEN ('01/'||birthday||'/'||birthyear)::date\n            ELSE (birthmonth||'/'||birthday||'/'||birthyear)::date\n    END) as dob,\n    regexp_replace(Left(phone,20), '([^[:ascii:]])', '') as phone,\n    regexp_replace(left(address1,100), '([^[:ascii:]])', '') as address1,\n    regexp_replace(left(address2,100), '([^[:ascii:]])', '') as address2,\n    regexp_replace(left(city,50), '([^[:ascii:]])', '') as city,\n    regexp_replace(left(state,25), '([^[:ascii:]])', '') as state,\n    regexp_replace(left(zip,20), '([^[:ascii:]])', '') as zip,\n    regexp_replace(left(email,50), '([^[:ascii:]])', '') as email,\n    regexp_replace(left(cell,25), '([^[:ascii:]])', '') as cell,\n    null as  createddate,\n    visits,\n    amountspent,\n    case when deleted is null then (0::smallint)::int::boolean else (deleted::smallint)::int::boolean END as deleted ,\n    to_timestamp(membersince)  as membersince,\n    case when iscaregiver is null then (0::smallint)::int::boolean else (iscaregiver::smallint)::int::boolean END as iscaregiver,\n    CASE when ismember = 1 then 1 when points > 0 then 1 else 0 end as ismember,\n    regexp_replace(redcard, '([^[:ascii:]])', '') as mmj,\n    resolved_gender as gender,\n    modified as modified ,\n    -- time of record creation\n    created,\n    CONCAT(10, '~', org, '~', location,'~',customerid) AS customer_primary_key, --NEED to refactor to account for ORG ID\n    --rank by unique columns (this table should be unique)\n    ROW_NUMBER() OVER (PARTITION BY customerid, org, location ORDER BY created DESC) rank,\n    birthyear,\n    resolved_gender as sex,\n    case when birthyear is null  then 0 when birthyear = '' then 0 else (cast( EXTRACT( YEAR FROM current_timestamp()) as int) - Cast(birthyear as int)) end as Age,\n    --DEI-236\n    current_timestamp() as extract_date\nfrom postgres_cann_replication_public.customers_raw where _fivetran_deleted = false\n)\n\nselect * from selected where rank = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.bt_21_real_time.stg_inventory_rooms_retail": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "stg_inventory_rooms_retail", "resource_type": "model", "package_name": "bt_21_real_time", "path": "staging/stg_inventory_rooms_retail.sql", "original_file_path": "models/staging/stg_inventory_rooms_retail.sql", "unique_id": "model.bt_21_real_time.stg_inventory_rooms_retail", "fqn": ["bt_21_real_time", "staging", "stg_inventory_rooms_retail"], "alias": "stg_inventory_rooms_retail", "checksum": {"name": "sha256", "checksum": "84650a3f4289e5b5ad42e7398582f99b1f95d770a15c6bedc6a8a47c745e5b88"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bt_21_real_time://models/bt_backend_data.yml", "build_path": "target/run/bt_21_real_time/models/staging/stg_inventory_rooms_retail.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1686068133.8271747, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.stg_inventory_rooms_retail", "raw_code": "with \n\nselected as(\n    select\n        org,\n        location,\n        id,\n        coalesce(regexp_replace(roomname, '([^[:ascii:]])', ''), 'NA') as room,\n        current_timestamp as extract_date\n    from postgres_cann_replication_public.inventoryrooms_raw where _fivetran_deleted = false\n)\n\nselect * from selected", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/bt_21_real_time/models/staging/stg_inventory_rooms_retail.sql", "compiled": true, "compiled_code": "with \n\nselected as(\n    select\n        org,\n        location,\n        id,\n        coalesce(regexp_replace(roomname, '([^[:ascii:]])', ''), 'NA') as room,\n        current_timestamp as extract_date\n    from postgres_cann_replication_public.inventoryrooms_raw where _fivetran_deleted = false\n)\n\nselect * from selected", "extra_ctes_injected": true, "extra_ctes": []}, "model.bt_21_real_time.stg_vendors_retail": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "stg_vendors_retail", "resource_type": "model", "package_name": "bt_21_real_time", "path": "staging/stg_vendors_retail.sql", "original_file_path": "models/staging/stg_vendors_retail.sql", "unique_id": "model.bt_21_real_time.stg_vendors_retail", "fqn": ["bt_21_real_time", "staging", "stg_vendors_retail"], "alias": "stg_vendors_retail", "checksum": {"name": "sha256", "checksum": "632863024aaeed61fe36daed07662849ba1b2450a662daa0ddd05ab06819decb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"vendorid": {"name": "vendorid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bt_21_real_time://models/bt_backend_data.yml", "build_path": "target/run/bt_21_real_time/models/staging/stg_vendors_retail.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1686068133.8402948, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.stg_vendors_retail", "raw_code": "with \n-- select customers from the nm trace schema\n\nselected as  (\n    select\n            id as vendorid,\n            org,\n            regexp_replace( LEFT(name, 100), '([^[:ascii:]])', '') as vendorname,\n            name as vendor_name,\n            current_timestamp() as extract_date\n    from postgres_cann_replication_public.vendors_raw where _fivetran_deleted = false\n)\nselect * from selected", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/bt_21_real_time/models/staging/stg_vendors_retail.sql", "compiled": true, "compiled_code": "with \n-- select customers from the nm trace schema\n\nselected as  (\n    select\n            id as vendorid,\n            org,\n            regexp_replace( LEFT(name, 100), '([^[:ascii:]])', '') as vendorname,\n            name as vendor_name,\n            current_timestamp() as extract_date\n    from postgres_cann_replication_public.vendors_raw where _fivetran_deleted = false\n)\nselect * from selected", "extra_ctes_injected": true, "extra_ctes": []}, "model.bt_21_real_time.stg_payments_retail": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "stg_payments_retail", "resource_type": "model", "package_name": "bt_21_real_time", "path": "staging/stg_payments_retail.sql", "original_file_path": "models/staging/stg_payments_retail.sql", "unique_id": "model.bt_21_real_time.stg_payments_retail", "fqn": ["bt_21_real_time", "staging", "stg_payments_retail"], "alias": "stg_payments_retail", "checksum": {"name": "sha256", "checksum": "7142b2e10d8638359507a64120911a961bdb7436fbbbf730b1cfc0b1cf7592a8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"ticketid": {"name": "ticketid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bt_21_real_time://models/bt_backend_data.yml", "build_path": "target/run/bt_21_real_time/models/staging/stg_payments_retail.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1686068133.8311422, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.stg_payments_retail", "raw_code": "with \n-- select customers from the nm trace schema\n\nselected as  (\n    select\n        org,\n        location,\n        -- group each payment method cell into a comma separated list\n        listagg(paymentmethod, ',') as paymentmethod,\n        ticketid,\n        current_timestamp() as extract_date\n\n    from postgres_cann_replication_public.payments_raw where _fivetran_deleted = false\n    group by\n        org,\n        location,\n        ticketid\n)\nselect * from selected where ticketid is not null", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/bt_21_real_time/models/staging/stg_payments_retail.sql", "compiled": true, "compiled_code": "with \n-- select customers from the nm trace schema\n\nselected as  (\n    select\n        org,\n        location,\n        -- group each payment method cell into a comma separated list\n        listagg(paymentmethod, ',') as paymentmethod,\n        ticketid,\n        current_timestamp() as extract_date\n\n    from postgres_cann_replication_public.payments_raw where _fivetran_deleted = false\n    group by\n        org,\n        location,\n        ticketid\n)\nselect * from selected where ticketid is not null", "extra_ctes_injected": true, "extra_ctes": []}, "model.bt_21_real_time.stg_tickets_retail": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "stg_tickets_retail", "resource_type": "model", "package_name": "bt_21_real_time", "path": "staging/stg_tickets_retail.sql", "original_file_path": "models/staging/stg_tickets_retail.sql", "unique_id": "model.bt_21_real_time.stg_tickets_retail", "fqn": ["bt_21_real_time", "staging", "stg_tickets_retail"], "alias": "stg_tickets_retail", "checksum": {"name": "sha256", "checksum": "4a48959866add39dbae55e96205f7d2c2225f5c6e1721572eb0d88e9d12a736e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"ticketid": {"name": "ticketid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bt_21_real_time://models/bt_backend_data.yml", "build_path": "target/run/bt_21_real_time/models/staging/stg_tickets_retail.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1686068133.8391805, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.stg_tickets_retail", "raw_code": "with \n-- select customers from the nm trace schema\n\nselected as  (\n    select\n\n        org,\n\n        current_timestamp() as extract_date,\n        userid as employee_userid,\n        location,\n        coalesce(transactionid, id :: float) as transactionid,\n        id as ticketid,\n        ROW_NUMBER() OVER (PARTITION BY id, org, location ORDER BY datetime DESC) as rank,\n        datetime,\n        to_timestamp(datetime) as datetime_timestamp\n\n    from postgres_cann_replication_public.tickets_raw where _fivetran_deleted = false\n)\nselect * from selected where ticketid is not null", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/bt_21_real_time/models/staging/stg_tickets_retail.sql", "compiled": true, "compiled_code": "with \n-- select customers from the nm trace schema\n\nselected as  (\n    select\n\n        org,\n\n        current_timestamp() as extract_date,\n        userid as employee_userid,\n        location,\n        coalesce(transactionid, id :: float) as transactionid,\n        id as ticketid,\n        ROW_NUMBER() OVER (PARTITION BY id, org, location ORDER BY datetime DESC) as rank,\n        datetime,\n        to_timestamp(datetime) as datetime_timestamp\n\n    from postgres_cann_replication_public.tickets_raw where _fivetran_deleted = false\n)\nselect * from selected where ticketid is not null", "extra_ctes_injected": true, "extra_ctes": []}, "model.bt_21_real_time.stg_product_categories_retail": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "stg_product_categories_retail", "resource_type": "model", "package_name": "bt_21_real_time", "path": "staging/stg_product_categories_retail.sql", "original_file_path": "models/staging/stg_product_categories_retail.sql", "unique_id": "model.bt_21_real_time.stg_product_categories_retail", "fqn": ["bt_21_real_time", "staging", "stg_product_categories_retail"], "alias": "stg_product_categories_retail", "checksum": {"name": "sha256", "checksum": "c39205b7b59004b27b9aa4aab0ddccff75914798c56a67fee77828c51d82f007"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"product_categories_id": {"name": "product_categories_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bt_21_real_time://models/bt_backend_data.yml", "build_path": "target/run/bt_21_real_time/models/staging/stg_product_categories_retail.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1686068133.8322914, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.stg_product_categories_retail", "raw_code": "with \n-- select customers from the nm trace schema\n\nselected as  (\n    select\n        org,\n        location,\n        name,\n        coalesce(regexp_replace(name, '([^[:ascii:]])', ''), 'NA') as tracecat, ---also known as 'category' in raw_products\n        id as product_categories_id,\n        current_timestamp() as extract_date\n    from postgres_cann_replication_public.productcategories_raw where _fivetran_deleted = false\n)\n\nselect * from selected", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/bt_21_real_time/models/staging/stg_product_categories_retail.sql", "compiled": true, "compiled_code": "with \n-- select customers from the nm trace schema\n\nselected as  (\n    select\n        org,\n        location,\n        name,\n        coalesce(regexp_replace(name, '([^[:ascii:]])', ''), 'NA') as tracecat, ---also known as 'category' in raw_products\n        id as product_categories_id,\n        current_timestamp() as extract_date\n    from postgres_cann_replication_public.productcategories_raw where _fivetran_deleted = false\n)\n\nselect * from selected", "extra_ctes_injected": true, "extra_ctes": []}, "model.bt_21_real_time.stg_productslog_retail": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "stg_productslog_retail", "resource_type": "model", "package_name": "bt_21_real_time", "path": "staging/stg_productslog_retail.sql", "original_file_path": "models/staging/stg_productslog_retail.sql", "unique_id": "model.bt_21_real_time.stg_productslog_retail", "fqn": ["bt_21_real_time", "staging", "stg_productslog_retail"], "alias": "stg_productslog_retail", "checksum": {"name": "sha256", "checksum": "916f47dbe9c30ab0e18c391de1e62481b670a63fe5cb67fd1b4ffa20763988df"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/bt_21_real_time/models/staging/stg_productslog_retail.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1686068133.7574103, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.stg_productslog_retail", "raw_code": "with \n-- select customers from the nm trace schema\n\nselected as  (\n    select\n        org,\n\t\tlogid,\n        -- window fun to get the max logid per product-org to filter on later\n        -- this is accurate but this table can be removed.\n        -- see confluence doc \"BT 1.0 source data\" section product/inventory > inventory for an explanation\n        max(logid) over (partition by id, org) as max_logid,\n        id as productid,\n\t\tcoalesce(regexp_replace(name, '([^[:ascii:]])', ''), id::text) as productname,\n        name,\n\t\tapplymemberdiscount,\n\t\tregexp_replace(strain, '([^[:ascii:]])', '') as strain,\n\t\tregexp_replace(pricepoint, '([^[:ascii:]])', '') as pricepoint,\n\t\tismedicated,\n\t\tlocation,\n        sessiontime,\n        -- DEI-236\n        to_timestamp(sessiontime) as sessiontime_timestamp,\n\t\tproductcategory,\n\t\tinventorytype,\n\t\ttaxcategory,\n\t\tdefaultvendor,\n\t\tcostperunit,\n        sharedcategories,\n        -- DEI-236\n        current_timestamp() as extract_date\n\n\tfrom postgres_cann_replication_public.productslog_raw where _fivetran_deleted = false\n)\n\nselect * from selected where logid = max_logid", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/bt_21_real_time/models/staging/stg_productslog_retail.sql", "compiled": true, "compiled_code": "with \n-- select customers from the nm trace schema\n\nselected as  (\n    select\n        org,\n\t\tlogid,\n        -- window fun to get the max logid per product-org to filter on later\n        -- this is accurate but this table can be removed.\n        -- see confluence doc \"BT 1.0 source data\" section product/inventory > inventory for an explanation\n        max(logid) over (partition by id, org) as max_logid,\n        id as productid,\n\t\tcoalesce(regexp_replace(name, '([^[:ascii:]])', ''), id::text) as productname,\n        name,\n\t\tapplymemberdiscount,\n\t\tregexp_replace(strain, '([^[:ascii:]])', '') as strain,\n\t\tregexp_replace(pricepoint, '([^[:ascii:]])', '') as pricepoint,\n\t\tismedicated,\n\t\tlocation,\n        sessiontime,\n        -- DEI-236\n        to_timestamp(sessiontime) as sessiontime_timestamp,\n\t\tproductcategory,\n\t\tinventorytype,\n\t\ttaxcategory,\n\t\tdefaultvendor,\n\t\tcostperunit,\n        sharedcategories,\n        -- DEI-236\n        current_timestamp() as extract_date\n\n\tfrom postgres_cann_replication_public.productslog_raw where _fivetran_deleted = false\n)\n\nselect * from selected where logid = max_logid", "extra_ctes_injected": true, "extra_ctes": []}, "model.bt_21_real_time.stg_inventory_retail": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "stg_inventory_retail", "resource_type": "model", "package_name": "bt_21_real_time", "path": "staging/stg_inventory_retail.sql", "original_file_path": "models/staging/stg_inventory_retail.sql", "unique_id": "model.bt_21_real_time.stg_inventory_retail", "fqn": ["bt_21_real_time", "staging", "stg_inventory_retail"], "alias": "stg_inventory_retail", "checksum": {"name": "sha256", "checksum": "c85b8e8195230ed57b7fda6f4e88b542f89a43749fb6527c4c24c296e3c8facb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"id": {"name": "id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bt_21_real_time://models/bt_backend_data.yml", "build_path": "target/run/bt_21_real_time/models/staging/stg_inventory_retail.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1686068133.8237567, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.stg_inventory_retail", "raw_code": "with \n\nselected as (\n    select\n        regexp_replace(strain, '([^[:ascii:]])', '') as strain,\n\t\tcoalesce(location, 0) as location,\n\t\t--coalesce (productid,-1)  as product_id,\n\t\tcoalesce (productid,-1)  as productid,\n        id,\n        org,\n        to_timestamp(expiration) as expiration,\n        regexp_replace(straintype, '([^[:ascii:]])', '') as straintype,\n        cost_per_unit,\n        cost_per_unit as costperunit,\n        pricein,\n        vendorid,\n        -- DEI-236\n        sessiontime,\n        to_timestamp(sessiontime) as sessiontime_timestamp,\n        -- DEI-236\n        current_timestamp() as extract_date,\n        producer,\n        inventorytype\n\n    from postgres_cann_replication_public.inventory_raw where _fivetran_deleted = false\n)\n\nselect * from selected", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/bt_21_real_time/models/staging/stg_inventory_retail.sql", "compiled": true, "compiled_code": "with \n\nselected as (\n    select\n        regexp_replace(strain, '([^[:ascii:]])', '') as strain,\n\t\tcoalesce(location, 0) as location,\n\t\t--coalesce (productid,-1)  as product_id,\n\t\tcoalesce (productid,-1)  as productid,\n        id,\n        org,\n        to_timestamp(expiration) as expiration,\n        regexp_replace(straintype, '([^[:ascii:]])', '') as straintype,\n        cost_per_unit,\n        cost_per_unit as costperunit,\n        pricein,\n        vendorid,\n        -- DEI-236\n        sessiontime,\n        to_timestamp(sessiontime) as sessiontime_timestamp,\n        -- DEI-236\n        current_timestamp() as extract_date,\n        producer,\n        inventorytype\n\n    from postgres_cann_replication_public.inventory_raw where _fivetran_deleted = false\n)\n\nselect * from selected", "extra_ctes_injected": true, "extra_ctes": []}, "model.bt_21_real_time.stg_inventory_types_retail": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "stg_inventory_types_retail", "resource_type": "model", "package_name": "bt_21_real_time", "path": "staging/stg_inventory_types_retail.sql", "original_file_path": "models/staging/stg_inventory_types_retail.sql", "unique_id": "model.bt_21_real_time.stg_inventory_types_retail", "fqn": ["bt_21_real_time", "staging", "stg_inventory_types_retail"], "alias": "stg_inventory_types_retail", "checksum": {"name": "sha256", "checksum": "986805507bcfafb90e7513794f07bccd52b8ea0fa1897ca050548fdcfa68fd6d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/bt_21_real_time/models/staging/stg_inventory_types_retail.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1686068133.762881, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.stg_inventory_types_retail", "raw_code": "with \n-- select customers from the nm trace schema\n\nselected as (\n    select\n        org,\n        id,\n        regexp_replace(name, '([^[:ascii:]])', '') as inventorytype,\n        -- DEI-236\n        current_timestamp() as extract_date\n    from postgres_cann_replication_public.inventorytypes_raw where _fivetran_deleted = false\n)\n\nselect * from selected", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/bt_21_real_time/models/staging/stg_inventory_types_retail.sql", "compiled": true, "compiled_code": "with \n-- select customers from the nm trace schema\n\nselected as (\n    select\n        org,\n        id,\n        regexp_replace(name, '([^[:ascii:]])', '') as inventorytype,\n        -- DEI-236\n        current_timestamp() as extract_date\n    from postgres_cann_replication_public.inventorytypes_raw where _fivetran_deleted = false\n)\n\nselect * from selected", "extra_ctes_injected": true, "extra_ctes": []}, "model.bt_21_real_time.stg_sales_retail": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "stg_sales_retail", "resource_type": "model", "package_name": "bt_21_real_time", "path": "staging/stg_sales_retail.sql", "original_file_path": "models/staging/stg_sales_retail.sql", "unique_id": "model.bt_21_real_time.stg_sales_retail", "fqn": ["bt_21_real_time", "staging", "stg_sales_retail"], "alias": "stg_sales_retail", "checksum": {"name": "sha256", "checksum": "15bd7f0bc6e89fc294f9a913ac65da67df4ba72c8b17c1ad6c05907fe3224680"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"saleid": {"name": "saleid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bt_21_real_time://models/bt_backend_data.yml", "build_path": "target/run/bt_21_real_time/models/staging/stg_sales_retail.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1686068133.8364646, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.stg_sales_retail", "raw_code": "with \n-- select customers from the nm trace schema\nselected as  (\n    select\n        s.org,\n        location,\n        -- there is confusion about which price column to use. either price_adjusted_for_ticket_discounts or price_post_discount\n        price - price_adjusted_for_ticket_discounts as discountamt, --price_adjusted_for_ticket_discounts\n        -- there is confusion about which price column to use. either price_adjusted_for_ticket_discounts or price_post_discount\n        price_adjusted_for_ticket_discounts as price_post_discount,\n        ticketid,\n        refticketid as refund_ticketid,\n        replication_val,\n        datetime,\n        to_timestamp(datetime) as datetime_timestamp,\n        convert_timezone('UTC', o.contact_name, to_timestamp(datetime)) as datetime_timestamp_tz,\n        o.contact_name as time_zone,\n        coalesce( REGEXP_REPLACE( LEFT(strain, 100), '([^[:ascii:]])', ''), id :: text) as strain,\n        coalesce(price, 0) as price,\n        weight as weight,\n        (weighheavy :: smallint):: int :: boolean as weighheavy,\n        LEFT(pricepoint, 100) as pricepoint,\n        id as saleid,\n        productid as productid,\n        -- absolutely not coalescing this this with ticketid, leave transactionid as is\n        --coalesce(transactionid, ticketid :: float) as transactionid,\n        transactionid as transactionid,\n        transactionid_original,\n        inventoryid,\n        customerid,\n        taxcat,\n        -- so far no refunds/deletes are null, for trace that is the default value\n        refunded,\n        deleted,\n        tax_collected as pretaxprice,\n        -- DEI-23423\n        tax_collected_excise,\n        -- DEI-236\n        current_timestamp() as extract_date\n    from postgres_cann_replication_public.sales_raw s join postgres_cann_replication_public.org o on s.org = o.orgid \n    where s._fivetran_deleted = false and to_timestamp(datetime) > GETDATE() - interval '1095 days'\n)\nselect * from selected", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/bt_21_real_time/models/staging/stg_sales_retail.sql", "compiled": true, "compiled_code": "with \n-- select customers from the nm trace schema\nselected as  (\n    select\n        s.org,\n        location,\n        -- there is confusion about which price column to use. either price_adjusted_for_ticket_discounts or price_post_discount\n        price - price_adjusted_for_ticket_discounts as discountamt, --price_adjusted_for_ticket_discounts\n        -- there is confusion about which price column to use. either price_adjusted_for_ticket_discounts or price_post_discount\n        price_adjusted_for_ticket_discounts as price_post_discount,\n        ticketid,\n        refticketid as refund_ticketid,\n        replication_val,\n        datetime,\n        to_timestamp(datetime) as datetime_timestamp,\n        convert_timezone('UTC', o.contact_name, to_timestamp(datetime)) as datetime_timestamp_tz,\n        o.contact_name as time_zone,\n        coalesce( REGEXP_REPLACE( LEFT(strain, 100), '([^[:ascii:]])', ''), id :: text) as strain,\n        coalesce(price, 0) as price,\n        weight as weight,\n        (weighheavy :: smallint):: int :: boolean as weighheavy,\n        LEFT(pricepoint, 100) as pricepoint,\n        id as saleid,\n        productid as productid,\n        -- absolutely not coalescing this this with ticketid, leave transactionid as is\n        --coalesce(transactionid, ticketid :: float) as transactionid,\n        transactionid as transactionid,\n        transactionid_original,\n        inventoryid,\n        customerid,\n        taxcat,\n        -- so far no refunds/deletes are null, for trace that is the default value\n        refunded,\n        deleted,\n        tax_collected as pretaxprice,\n        -- DEI-23423\n        tax_collected_excise,\n        -- DEI-236\n        current_timestamp() as extract_date\n    from postgres_cann_replication_public.sales_raw s join postgres_cann_replication_public.org o on s.org = o.orgid \n    where s._fivetran_deleted = false and to_timestamp(datetime) > GETDATE() - interval '1095 days'\n)\nselect * from selected", "extra_ctes_injected": true, "extra_ctes": []}, "model.bt_21_real_time.stg_location_type_desc": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "stg_location_type_desc", "resource_type": "model", "package_name": "bt_21_real_time", "path": "staging/stg_location_type_desc.sql", "original_file_path": "models/staging/stg_location_type_desc.sql", "unique_id": "model.bt_21_real_time.stg_location_type_desc", "fqn": ["bt_21_real_time", "staging", "stg_location_type_desc"], "alias": "stg_location_type_desc", "checksum": {"name": "sha256", "checksum": "8245ed7751e8171d6c6c1eeb7c0cf2a8684b9a08a79ae7db9b404b5c7a0e6c08"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/bt_21_real_time/models/staging/stg_location_type_desc.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1686068133.76823, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.stg_location_type_desc", "raw_code": "with \n-- select customers from the nm trace schema\n\nselected as  (\n    select\n        description as description,\n        state as state,\n        locationtype as locationtype\n    from postgres_cann_replication_public.location_type_desc where _fivetran_deleted = false\n)\n\nselect *\nfrom selected", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/bt_21_real_time/models/staging/stg_location_type_desc.sql", "compiled": true, "compiled_code": "with \n-- select customers from the nm trace schema\n\nselected as  (\n    select\n        description as description,\n        state as state,\n        locationtype as locationtype\n    from postgres_cann_replication_public.location_type_desc where _fivetran_deleted = false\n)\n\nselect *\nfrom selected", "extra_ctes_injected": true, "extra_ctes": []}, "model.bt_21_real_time.stg_org_retail": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "stg_org_retail", "resource_type": "model", "package_name": "bt_21_real_time", "path": "staging/stg_org_retail.sql", "original_file_path": "models/staging/stg_org_retail.sql", "unique_id": "model.bt_21_real_time.stg_org_retail", "fqn": ["bt_21_real_time", "staging", "stg_org_retail"], "alias": "stg_org_retail", "checksum": {"name": "sha256", "checksum": "1fdbf19d75bf66e9445c14fddbeae21a9b22129b3edf15fa84d35543b1a06490"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/bt_21_real_time/models/staging/stg_org_retail.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1686068133.7716508, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.stg_org_retail", "raw_code": "with \n-- select customers from the nm trace schema\n\nselected as  (\n    select\n        orgid as orgid,\n        masterorg as masterorg,\n        orgname as orgname,\n        contact_name as time_zone\n\n    from postgres_cann_replication_public.org where _fivetran_deleted = false\n)\n\nselect * from selected", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/bt_21_real_time/models/staging/stg_org_retail.sql", "compiled": true, "compiled_code": "with \n-- select customers from the nm trace schema\n\nselected as  (\n    select\n        orgid as orgid,\n        masterorg as masterorg,\n        orgname as orgname,\n        contact_name as time_zone\n\n    from postgres_cann_replication_public.org where _fivetran_deleted = false\n)\n\nselect * from selected", "extra_ctes_injected": true, "extra_ctes": []}, "model.bt_21_real_time.stg_locations_retail": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "stg_locations_retail", "resource_type": "model", "package_name": "bt_21_real_time", "path": "staging/stg_locations_retail.sql", "original_file_path": "models/staging/stg_locations_retail.sql", "unique_id": "model.bt_21_real_time.stg_locations_retail", "fqn": ["bt_21_real_time", "staging", "stg_locations_retail"], "alias": "stg_locations_retail", "checksum": {"name": "sha256", "checksum": "29ba724a4fe0452cfe64ecb053f04991127a02a7ef9700c4603d66668902461b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"location": {"name": "location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bt_21_real_time://models/bt_backend_data.yml", "build_path": "target/run/bt_21_real_time/models/staging/stg_locations_retail.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1686068133.8298376, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.stg_locations_retail", "raw_code": "with \n-- select customers from the nm trace schema\n\nselected as  (\n    select\n        org,\n        id as location,\n        name as location_name,\n        licensenum,\n        left(address1, 49) as address1,\n        left(address2, 49) as address2,\n        city,\n        upper(state) as state,\n        zip,\n        left(phone, 20) as phone,\n        locationtype,\n        medical as med,\n        case when medical = 1 then 0 else 1 end as rec,\n        current_timestamp() as extract_date,\n        coalesce(id, 0) as locid,\n        LEFT(name, 50) as locname,\n        current_timestamp() as date\n    from postgres_cann_replication_public.locations_raw where _fivetran_deleted = false\n)\n\nselect * from selected", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/bt_21_real_time/models/staging/stg_locations_retail.sql", "compiled": true, "compiled_code": "with \n-- select customers from the nm trace schema\n\nselected as  (\n    select\n        org,\n        id as location,\n        name as location_name,\n        licensenum,\n        left(address1, 49) as address1,\n        left(address2, 49) as address2,\n        city,\n        upper(state) as state,\n        zip,\n        left(phone, 20) as phone,\n        locationtype,\n        medical as med,\n        case when medical = 1 then 0 else 1 end as rec,\n        current_timestamp() as extract_date,\n        coalesce(id, 0) as locid,\n        LEFT(name, 50) as locname,\n        current_timestamp() as date\n    from postgres_cann_replication_public.locations_raw where _fivetran_deleted = false\n)\n\nselect * from selected", "extra_ctes_injected": true, "extra_ctes": []}, "model.bt_21_real_time.stg_products_retail": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "stg_products_retail", "resource_type": "model", "package_name": "bt_21_real_time", "path": "staging/stg_products_retail.sql", "original_file_path": "models/staging/stg_products_retail.sql", "unique_id": "model.bt_21_real_time.stg_products_retail", "fqn": ["bt_21_real_time", "staging", "stg_products_retail"], "alias": "stg_products_retail", "checksum": {"name": "sha256", "checksum": "e7e4cea30ff0b1657c633f5bb9d11dbe3404b1225eba9d9f42bc45d0538b745c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"productid": {"name": "productid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bt_21_real_time://models/bt_backend_data.yml", "build_path": "target/run/bt_21_real_time/models/staging/stg_products_retail.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1686068133.8334172, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.stg_products_retail", "raw_code": "with \n-- select customers from the nm trace schema\n\nselected as  (\n    select distinct\n        regexp_replace(name, '([^[:ascii:]])', '') as name,\n        org,\n        location,\n        id as productid,\n        productcategory as product_categories_id,\n        regexp_replace(manufacturer, '([^[:ascii:]])', '') as manufacturer,\n        regexp_replace(producer, '([^[:ascii:]])', '') as producer,\n        regexp_replace(productdescription, '([^[:ascii:]])', '') as prod_desc,\n        defaultusable  as useable,\n        applymemberdiscount,\n\t\tcase\n\t\t\twhen requiresweighing is null then false\n\t\t\telse requiresweighing::boolean\n\t\tEND as requires_weighing,\n        strain,\n        inventorytype,\n        defaultvendor,\n        ismedicated,\n        costperunit,\n        created,\n        current_timestamp() as extract_date\n    from postgres_cann_replication_public.products_raw where _fivetran_deleted = false\n)\nselect * from selected", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/bt_21_real_time/models/staging/stg_products_retail.sql", "compiled": true, "compiled_code": "with \n-- select customers from the nm trace schema\n\nselected as  (\n    select distinct\n        regexp_replace(name, '([^[:ascii:]])', '') as name,\n        org,\n        location,\n        id as productid,\n        productcategory as product_categories_id,\n        regexp_replace(manufacturer, '([^[:ascii:]])', '') as manufacturer,\n        regexp_replace(producer, '([^[:ascii:]])', '') as producer,\n        regexp_replace(productdescription, '([^[:ascii:]])', '') as prod_desc,\n        defaultusable  as useable,\n        applymemberdiscount,\n\t\tcase\n\t\t\twhen requiresweighing is null then false\n\t\t\telse requiresweighing::boolean\n\t\tEND as requires_weighing,\n        strain,\n        inventorytype,\n        defaultvendor,\n        ismedicated,\n        costperunit,\n        created,\n        current_timestamp() as extract_date\n    from postgres_cann_replication_public.products_raw where _fivetran_deleted = false\n)\nselect * from selected", "extra_ctes_injected": true, "extra_ctes": []}, "model.bt_21_real_time.int_sales_retail": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "int_sales_retail", "resource_type": "model", "package_name": "bt_21_real_time", "path": "intermediate/int_sales_retail.sql", "original_file_path": "models/intermediate/int_sales_retail.sql", "unique_id": "model.bt_21_real_time.int_sales_retail", "fqn": ["bt_21_real_time", "intermediate", "int_sales_retail"], "alias": "int_sales_retail", "checksum": {"name": "sha256", "checksum": "5bf5273b18773535f9fd2cc1c9324537775116850688c9d1094a84e24d76ab72"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"saleid": {"name": "saleid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bt_21_real_time://models/bt_backend_data.yml", "build_path": "target/run/bt_21_real_time/models/intermediate/int_sales_retail.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1686068133.8626118, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.int_sales_retail", "raw_code": "with\n-- select from stage payments\npayments as (\n    select *\n    from {{ ref('stg_payments_retail') }}\n),\n\n-- select from stage sales\nsales as (\n    select *\n    from {{ ref('stg_sales_retail') }}\n),\n\n-- select from stage tickets\ntickets as (\n    select *\n    from {{ ref('stg_tickets_retail') }}\n),\n\n\n-- get refunds only from sales\nrefunds as (\n    -- make distinct so later join doesn't explode\n    select distinct\n        org,\n        location,\n        -- this col is the reference to the refunded transactionid\n        transactionid_original,\n        refunded\n    from sales\n    where refunded = 1\n),\n\n/*\nThis is essentially a self join to update refunded transactions\nA new column is created with the updated refund flag when applicable\n */\nsales_updated as (\n    select\n        sales.*,\n        -- when refund occured\n        case when refunds.refunded = 1\n            -- update column to indicate a refund\n            then 1\n            -- or leave it as is\n            else sales.refunded\n        -- name it as a new column\n        end as refunded_updated\n    from sales\n    left join refunds\n        -- join reference id on original id\n        on refunds.transactionid_original = sales.transactionid\n        and refunds.org = sales.org\n        and refunds.location = sales.location\n),\n\n-- join above tables. This was originally the largest query, the final boss, the behemoth\nthe_behemoth as (\n    select\n\n        -- from sales\n        sales_updated.org,\n        sales_updated.discountamt,\n        sales_updated.price_post_discount,\n        sales_updated.ticketid,\n        sales_updated.refund_ticketid,\n        sales_updated.datetime,\n        sales_updated.datetime_timestamp,\n        sales_updated.datetime_timestamp_tz,\n        sales_updated.strain,\n        sales_updated.weight,\n        sales_updated.pricepoint,\n        sales_updated.customerid,\n        sales_updated.transactionid,\n        sales_updated.saleid,\n        sales_updated.productid,\n        sales_updated.weighheavy,\n        coalesce(sales_updated.price, 0) as price,\n        sales_updated.pretaxprice,\n        sales_updated.deleted,\n        -- replace refund column with new updated col\n        sales_updated.refunded_updated as refunded,\n        sales_updated.location,\n        sales_updated.tax_collected_excise,\n\n        -- from tickets\n        tickets.employee_userid,\n\n        -- from payments\n        payments.paymentmethod,\n\n        -- constants\n        0 as producer,\n        -- DEI-236\n        current_timestamp() as extract_date\n\n    from sales_updated\n    left join tickets\n        on tickets.ticketid = sales_updated.ticketid\n        and tickets.location = sales_updated.location\n        and tickets.org = sales_updated.org\n    left join payments on payments.ticketid = sales_updated.ticketid\n        and payments.org = sales_updated.org\n        and payments.location = sales_updated.location\n)\n\n-- final select\nselect * from the_behemoth", "language": "sql", "refs": [["stg_payments_retail"], ["stg_sales_retail"], ["stg_tickets_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bt_21_real_time.stg_payments_retail", "model.bt_21_real_time.stg_sales_retail", "model.bt_21_real_time.stg_tickets_retail"]}, "compiled_path": "target/compiled/bt_21_real_time/models/intermediate/int_sales_retail.sql", "compiled": true, "compiled_code": "with\n-- select from stage payments\npayments as (\n    select *\n    from PC_FIVETRAN_DB.dbt_real_time.stg_payments_retail\n),\n\n-- select from stage sales\nsales as (\n    select *\n    from PC_FIVETRAN_DB.dbt_real_time.stg_sales_retail\n),\n\n-- select from stage tickets\ntickets as (\n    select *\n    from PC_FIVETRAN_DB.dbt_real_time.stg_tickets_retail\n),\n\n\n-- get refunds only from sales\nrefunds as (\n    -- make distinct so later join doesn't explode\n    select distinct\n        org,\n        location,\n        -- this col is the reference to the refunded transactionid\n        transactionid_original,\n        refunded\n    from sales\n    where refunded = 1\n),\n\n/*\nThis is essentially a self join to update refunded transactions\nA new column is created with the updated refund flag when applicable\n */\nsales_updated as (\n    select\n        sales.*,\n        -- when refund occured\n        case when refunds.refunded = 1\n            -- update column to indicate a refund\n            then 1\n            -- or leave it as is\n            else sales.refunded\n        -- name it as a new column\n        end as refunded_updated\n    from sales\n    left join refunds\n        -- join reference id on original id\n        on refunds.transactionid_original = sales.transactionid\n        and refunds.org = sales.org\n        and refunds.location = sales.location\n),\n\n-- join above tables. This was originally the largest query, the final boss, the behemoth\nthe_behemoth as (\n    select\n\n        -- from sales\n        sales_updated.org,\n        sales_updated.discountamt,\n        sales_updated.price_post_discount,\n        sales_updated.ticketid,\n        sales_updated.refund_ticketid,\n        sales_updated.datetime,\n        sales_updated.datetime_timestamp,\n        sales_updated.datetime_timestamp_tz,\n        sales_updated.strain,\n        sales_updated.weight,\n        sales_updated.pricepoint,\n        sales_updated.customerid,\n        sales_updated.transactionid,\n        sales_updated.saleid,\n        sales_updated.productid,\n        sales_updated.weighheavy,\n        coalesce(sales_updated.price, 0) as price,\n        sales_updated.pretaxprice,\n        sales_updated.deleted,\n        -- replace refund column with new updated col\n        sales_updated.refunded_updated as refunded,\n        sales_updated.location,\n        sales_updated.tax_collected_excise,\n\n        -- from tickets\n        tickets.employee_userid,\n\n        -- from payments\n        payments.paymentmethod,\n\n        -- constants\n        0 as producer,\n        -- DEI-236\n        current_timestamp() as extract_date\n\n    from sales_updated\n    left join tickets\n        on tickets.ticketid = sales_updated.ticketid\n        and tickets.location = sales_updated.location\n        and tickets.org = sales_updated.org\n    left join payments on payments.ticketid = sales_updated.ticketid\n        and payments.org = sales_updated.org\n        and payments.location = sales_updated.location\n)\n\n-- final select\nselect * from the_behemoth", "extra_ctes_injected": true, "extra_ctes": []}, "model.bt_21_real_time.int_products_retail": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "int_products_retail", "resource_type": "model", "package_name": "bt_21_real_time", "path": "intermediate/int_products_retail.sql", "original_file_path": "models/intermediate/int_products_retail.sql", "unique_id": "model.bt_21_real_time.int_products_retail", "fqn": ["bt_21_real_time", "intermediate", "int_products_retail"], "alias": "int_products_retail", "checksum": {"name": "sha256", "checksum": "b7383028e0b18666479616e58aeb01f4ac33ac566b6ff3df48da8a95ca5c97e5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"productid": {"name": "productid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bt_21_real_time://models/bt_backend_data.yml", "build_path": "target/run/bt_21_real_time/models/intermediate/int_products_retail.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1686068133.8610601, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.int_products_retail", "raw_code": "with \n-- select for stage products logs\nproducts_logs as (\n   select * from {{ ref('stg_productslog_retail') }}\n),\n\n-- select from stage products\nproducts as (\n   select * from {{ ref('stg_products_retail') }}\n),\n\n-- select from stage prod cat\nproduct_categories as (\n   select * from {{ ref('stg_product_categories_retail') }}\n),\n\n-- select from stage inv types\ninventory_types as (\n   select * from {{ ref('stg_inventory_types_retail') }}\n),\n\n-- select from stage inv\ninventory as (\n    select * from {{ ref('stg_inventory_retail') }}\n),\n\n-- select from stage vendors\nvendors as (\n    select * from {{ ref('stg_vendors_retail') }}\n),\n\n-- DEI-263 join fact tables\n-- make products the dominant table in the left join. Coalesce the two tables favoring products over productlogs\njoin_facts as (\n    select\n        --PRODUCTS px\n        products.productid,\n        products.productid as bt_legacy_product_id,\n        products.manufacturer,\n        products.producer, \n        products.prod_desc,\n        products.useable,  \n        products.org,\n        products.location,\n        products.ismedicated,\n        -- DEI-236 - since productid comes from products, the created col (date col) for the recency check should apply to products\n        -- originally the date col for this table was products_logs.sessiontime\n        -- its more sound to keep the date col from the table where productid is sourced from\n        products.created,\n\n        -- DEI-263 coalesce\n        coalesce(products.product_categories_id, products_logs.productcategory) as product_categories_id,\n        -- products.name was originally defined but never used down stream. \n        -- products_logs.productname has a higher fillrate\n        coalesce(products.name, products_logs.productname) as product_name,\n        coalesce(products.applymemberdiscount, products_logs.applymemberdiscount) as applymemberdiscount,\n        -- no need to coalesce, in products nulls are coerced to false\n        products.requires_weighing,\n        coalesce(products.strain, products_logs.strain) as product_strain,\n        coalesce(products.inventorytype, products_logs.inventorytype) as inventorytype,\n        coalesce(products.defaultvendor, products_logs.defaultvendor) as defaultvendor,\n        coalesce(products.costperunit, products_logs.costperunit) as costperunit\n\n    -- DEI-263 products is now dominant in the left join\n    from products\n    left join products_logs\n        on products_logs.productid = products.productid \n        and products_logs.org = products.org\n),\n\n-- join tables \njoin_dimensions as (\n\n    select distinct \n        -- from join_facts\n        join_facts.product_name,\n        join_facts.applymemberdiscount, \n        Coalesce(join_facts.product_strain, inventory.strain) as product_strain,\n        join_facts.ismedicated, \n        join_facts.requires_weighing,\n        join_facts.org,\n        join_facts.location,\n        join_facts.productid,\n        join_facts.bt_legacy_product_id,\n        join_facts.manufacturer,\n        coalesce(join_facts.producer, inventory.producer) as producer,\n        join_facts.prod_desc,\n        join_facts.useable,  \n        -- DEI-236 - since productid comes from products, the created col (date col) for the recency check should apply to products\n        -- originally the date col for this table was products_logs.sessiontime\n        -- its more sound to keep the date col from the table where productid is sourced from\n        join_facts.created,\n\n        -- product_categories\n        product_categories.tracecat as category,\n        product_categories.tracecat as updated_cat,\n\n        --INVENTORYTYPES i\n        inventory_types.inventorytype,\n\n        --INVENTORY ii\n        inventory.straintype,\n\n        --VENDORS v\n        vendors.vendor_name as vendor,\n        vendors.vendorid,\n        vendors.vendorname,\n\n        ---COMBO\n        COALESCE(join_facts.costperunit, inventory.cost_per_unit) as costperunit,\n\n        --NOT NEEDED or appears to be empty and has no previous reference\n        NULL as exp_date,\n        NULL as packaged_date,\n        NULL as packaged_weight,\n        NULL as unit_type,\n        10 as source,\n        CONCAT(10, '~', NULL,'~', join_facts.productid, '~',product_categories.tracecat) AS product_primary_key, --left out org for the moment that's what the NULL is\n        -- DEI-236\n        current_timestamp() as extract_date\n\n    from join_facts\n    left join product_categories \n        on product_categories.product_categories_id = join_facts.product_categories_id \n        and product_categories.org = join_facts.org\n    left join inventory_types\n        on inventory_types.id = join_facts.inventorytype\n        and inventory_types.org = join_facts.org\n    left join inventory\n        on inventory.productid = join_facts.productid\n        and inventory.org = join_facts.org\n    left join vendors\n        on join_facts.defaultvendor = vendors.vendorid\n        and join_facts.org = vendors.org\n),\n\n-- ranking, if necessary, only occurs because inventory is not unique.  \nranked_once as (\n    select \n        *,\n        ROW_NUMBER() OVER (\n            PARTITION BY \n                product_name, \n                org, \n                location, \n                category, \n                productid \n            ORDER BY \n                created \n            DESC) rank_1  \n    from join_dimensions\n),\n\n--rank two is like rank one but doesn't include productname or location\nranked_twice as (\n    select \n        *,\n        ROW_NUMBER() OVER (\n            PARTITION BY \n                org, \n                --category, \n                bt_legacy_product_id --aka id\n            ORDER BY \n                created \n            DESC) rank_2  \n    from ranked_once where rank_1 = 1\n)\n\n-- final select with filter for rank2\nselect \n    *,\n    row_number() over (order by (select null)) as sequentialid -- not necessary\nfrom ranked_twice \nwhere rank_2 = 1", "language": "sql", "refs": [["stg_productslog_retail"], ["stg_products_retail"], ["stg_product_categories_retail"], ["stg_inventory_types_retail"], ["stg_inventory_retail"], ["stg_vendors_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bt_21_real_time.stg_productslog_retail", "model.bt_21_real_time.stg_products_retail", "model.bt_21_real_time.stg_product_categories_retail", "model.bt_21_real_time.stg_inventory_types_retail", "model.bt_21_real_time.stg_inventory_retail", "model.bt_21_real_time.stg_vendors_retail"]}, "compiled_path": "target/compiled/bt_21_real_time/models/intermediate/int_products_retail.sql", "compiled": true, "compiled_code": "with \n-- select for stage products logs\nproducts_logs as (\n   select * from PC_FIVETRAN_DB.dbt_real_time.stg_productslog_retail\n),\n\n-- select from stage products\nproducts as (\n   select * from PC_FIVETRAN_DB.dbt_real_time.stg_products_retail\n),\n\n-- select from stage prod cat\nproduct_categories as (\n   select * from PC_FIVETRAN_DB.dbt_real_time.stg_product_categories_retail\n),\n\n-- select from stage inv types\ninventory_types as (\n   select * from PC_FIVETRAN_DB.dbt_real_time.stg_inventory_types_retail\n),\n\n-- select from stage inv\ninventory as (\n    select * from PC_FIVETRAN_DB.dbt_real_time.stg_inventory_retail\n),\n\n-- select from stage vendors\nvendors as (\n    select * from PC_FIVETRAN_DB.dbt_real_time.stg_vendors_retail\n),\n\n-- DEI-263 join fact tables\n-- make products the dominant table in the left join. Coalesce the two tables favoring products over productlogs\njoin_facts as (\n    select\n        --PRODUCTS px\n        products.productid,\n        products.productid as bt_legacy_product_id,\n        products.manufacturer,\n        products.producer, \n        products.prod_desc,\n        products.useable,  \n        products.org,\n        products.location,\n        products.ismedicated,\n        -- DEI-236 - since productid comes from products, the created col (date col) for the recency check should apply to products\n        -- originally the date col for this table was products_logs.sessiontime\n        -- its more sound to keep the date col from the table where productid is sourced from\n        products.created,\n\n        -- DEI-263 coalesce\n        coalesce(products.product_categories_id, products_logs.productcategory) as product_categories_id,\n        -- products.name was originally defined but never used down stream. \n        -- products_logs.productname has a higher fillrate\n        coalesce(products.name, products_logs.productname) as product_name,\n        coalesce(products.applymemberdiscount, products_logs.applymemberdiscount) as applymemberdiscount,\n        -- no need to coalesce, in products nulls are coerced to false\n        products.requires_weighing,\n        coalesce(products.strain, products_logs.strain) as product_strain,\n        coalesce(products.inventorytype, products_logs.inventorytype) as inventorytype,\n        coalesce(products.defaultvendor, products_logs.defaultvendor) as defaultvendor,\n        coalesce(products.costperunit, products_logs.costperunit) as costperunit\n\n    -- DEI-263 products is now dominant in the left join\n    from products\n    left join products_logs\n        on products_logs.productid = products.productid \n        and products_logs.org = products.org\n),\n\n-- join tables \njoin_dimensions as (\n\n    select distinct \n        -- from join_facts\n        join_facts.product_name,\n        join_facts.applymemberdiscount, \n        Coalesce(join_facts.product_strain, inventory.strain) as product_strain,\n        join_facts.ismedicated, \n        join_facts.requires_weighing,\n        join_facts.org,\n        join_facts.location,\n        join_facts.productid,\n        join_facts.bt_legacy_product_id,\n        join_facts.manufacturer,\n        coalesce(join_facts.producer, inventory.producer) as producer,\n        join_facts.prod_desc,\n        join_facts.useable,  \n        -- DEI-236 - since productid comes from products, the created col (date col) for the recency check should apply to products\n        -- originally the date col for this table was products_logs.sessiontime\n        -- its more sound to keep the date col from the table where productid is sourced from\n        join_facts.created,\n\n        -- product_categories\n        product_categories.tracecat as category,\n        product_categories.tracecat as updated_cat,\n\n        --INVENTORYTYPES i\n        inventory_types.inventorytype,\n\n        --INVENTORY ii\n        inventory.straintype,\n\n        --VENDORS v\n        vendors.vendor_name as vendor,\n        vendors.vendorid,\n        vendors.vendorname,\n\n        ---COMBO\n        COALESCE(join_facts.costperunit, inventory.cost_per_unit) as costperunit,\n\n        --NOT NEEDED or appears to be empty and has no previous reference\n        NULL as exp_date,\n        NULL as packaged_date,\n        NULL as packaged_weight,\n        NULL as unit_type,\n        10 as source,\n        CONCAT(10, '~', NULL,'~', join_facts.productid, '~',product_categories.tracecat) AS product_primary_key, --left out org for the moment that's what the NULL is\n        -- DEI-236\n        current_timestamp() as extract_date\n\n    from join_facts\n    left join product_categories \n        on product_categories.product_categories_id = join_facts.product_categories_id \n        and product_categories.org = join_facts.org\n    left join inventory_types\n        on inventory_types.id = join_facts.inventorytype\n        and inventory_types.org = join_facts.org\n    left join inventory\n        on inventory.productid = join_facts.productid\n        and inventory.org = join_facts.org\n    left join vendors\n        on join_facts.defaultvendor = vendors.vendorid\n        and join_facts.org = vendors.org\n),\n\n-- ranking, if necessary, only occurs because inventory is not unique.  \nranked_once as (\n    select \n        *,\n        ROW_NUMBER() OVER (\n            PARTITION BY \n                product_name, \n                org, \n                location, \n                category, \n                productid \n            ORDER BY \n                created \n            DESC) rank_1  \n    from join_dimensions\n),\n\n--rank two is like rank one but doesn't include productname or location\nranked_twice as (\n    select \n        *,\n        ROW_NUMBER() OVER (\n            PARTITION BY \n                org, \n                --category, \n                bt_legacy_product_id --aka id\n            ORDER BY \n                created \n            DESC) rank_2  \n    from ranked_once where rank_1 = 1\n)\n\n-- final select with filter for rank2\nselect \n    *,\n    row_number() over (order by (select null)) as sequentialid -- not necessary\nfrom ranked_twice \nwhere rank_2 = 1", "extra_ctes_injected": true, "extra_ctes": []}, "model.bt_21_real_time.int_dispensary_retail": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "int_dispensary_retail", "resource_type": "model", "package_name": "bt_21_real_time", "path": "intermediate/int_dispensary_retail.sql", "original_file_path": "models/intermediate/int_dispensary_retail.sql", "unique_id": "model.bt_21_real_time.int_dispensary_retail", "fqn": ["bt_21_real_time", "intermediate", "int_dispensary_retail"], "alias": "int_dispensary_retail", "checksum": {"name": "sha256", "checksum": "107fbd035c0e3a894b0cbc6b256aa3439af862ad6dc61707e237be84ea40c4f8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"org": {"name": "org", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location": {"name": "location", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bt_21_real_time://models/bt_backend_data.yml", "build_path": "target/run/bt_21_real_time/models/intermediate/int_dispensary_retail.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1686068133.855971, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.int_dispensary_retail", "raw_code": "with\n-- select from stage locations\nlocations as (\n    select\n       *\n    from {{ ref('stg_locations_retail') }}\n),\n\n-- select from stage org\norg as (\n    select *\n    from {{ ref('stg_org_retail') }}\n),\n\n-- select from location type look up table\nlocation_type_desc as (\n    select *\n    from {{ ref('stg_location_type_desc') }}\n),\n\n-- join above tables\njoin_tables as (\n    select\n\n        -- placeholder for seq id created in DDL\n        -- this is not used downstream and the name is misleading (you'd think it'd be the concatenation of org, loc, etc but its not). It can be removed.\n        null as dispensaryid,\n\n        -- from locations\n        locations.org,\n        locations.location,\n        locations.location_name,\n        locations.licensenum,\n        locations.address1,\n        locations.address2,\n        locations.city,\n        locations.state,\n        locations.zip,\n        locations.phone,\n        locations.locationtype,\n        locations.med,\n        locations.rec,\n        CONCAT(10, '~', locations.org, '~', locations.location) AS dispensary_primary_key,\n\n        -- from org\n        org.masterorg,\n        org.orgname,\n\n        -- from location_type_desc\n        -- column name modified for DEI-252\n        location_type_desc.description as location_type_desc,\n\n        -- seq id -- not needed\n        row_number() over (order by (select null)) as sequentialid --hacky solution to get sequentialid\n\n    from locations\n    left join org\n        on org.orgid = locations.org\n    left join location_type_desc\n        -- join columns modified for DEI-252\n        on location_type_desc.state = locations.state\n        and location_type_desc.locationtype = locations.locationtype\n),\n\nrenamed as (\n    select\n\n        -- simple selects\n        location,\n        location_name,\n        licensenum,\n        address1,\n        address2,\n        city,\n        state,\n        zip,\n        phone,\n        locationtype,\n        med,\n        rec::smallint,\n        masterorg,\n        orgname,\n        org,\n        location_type_desc,\n        dispensaryid::int,\n        sequentialid,\n\n        -- constants\n        current_timestamp() as extract_date,\n        current_timestamp() as read_time,\n        current_timestamp() as load_time,\n        10 as source,\n        null as active_cann_client,\n        null as data_rights,\n\n        -- combinations\n        CONCAT(10, '~', org, '~', location) AS dispensary_primary_key\n\n    from join_tables\n\n)\n\n-- final select\nselect * from renamed", "language": "sql", "refs": [["stg_locations_retail"], ["stg_org_retail"], ["stg_location_type_desc"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bt_21_real_time.stg_locations_retail", "model.bt_21_real_time.stg_org_retail", "model.bt_21_real_time.stg_location_type_desc"]}, "compiled_path": "target/compiled/bt_21_real_time/models/intermediate/int_dispensary_retail.sql", "compiled": true, "compiled_code": "with\n-- select from stage locations\nlocations as (\n    select\n       *\n    from PC_FIVETRAN_DB.dbt_real_time.stg_locations_retail\n),\n\n-- select from stage org\norg as (\n    select *\n    from PC_FIVETRAN_DB.dbt_real_time.stg_org_retail\n),\n\n-- select from location type look up table\nlocation_type_desc as (\n    select *\n    from PC_FIVETRAN_DB.dbt_real_time.stg_location_type_desc\n),\n\n-- join above tables\njoin_tables as (\n    select\n\n        -- placeholder for seq id created in DDL\n        -- this is not used downstream and the name is misleading (you'd think it'd be the concatenation of org, loc, etc but its not). It can be removed.\n        null as dispensaryid,\n\n        -- from locations\n        locations.org,\n        locations.location,\n        locations.location_name,\n        locations.licensenum,\n        locations.address1,\n        locations.address2,\n        locations.city,\n        locations.state,\n        locations.zip,\n        locations.phone,\n        locations.locationtype,\n        locations.med,\n        locations.rec,\n        CONCAT(10, '~', locations.org, '~', locations.location) AS dispensary_primary_key,\n\n        -- from org\n        org.masterorg,\n        org.orgname,\n\n        -- from location_type_desc\n        -- column name modified for DEI-252\n        location_type_desc.description as location_type_desc,\n\n        -- seq id -- not needed\n        row_number() over (order by (select null)) as sequentialid --hacky solution to get sequentialid\n\n    from locations\n    left join org\n        on org.orgid = locations.org\n    left join location_type_desc\n        -- join columns modified for DEI-252\n        on location_type_desc.state = locations.state\n        and location_type_desc.locationtype = locations.locationtype\n),\n\nrenamed as (\n    select\n\n        -- simple selects\n        location,\n        location_name,\n        licensenum,\n        address1,\n        address2,\n        city,\n        state,\n        zip,\n        phone,\n        locationtype,\n        med,\n        rec::smallint,\n        masterorg,\n        orgname,\n        org,\n        location_type_desc,\n        dispensaryid::int,\n        sequentialid,\n\n        -- constants\n        current_timestamp() as extract_date,\n        current_timestamp() as read_time,\n        current_timestamp() as load_time,\n        10 as source,\n        null as active_cann_client,\n        null as data_rights,\n\n        -- combinations\n        CONCAT(10, '~', org, '~', location) AS dispensary_primary_key\n\n    from join_tables\n\n)\n\n-- final select\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": []}, "model.bt_21_real_time.int_customers_retail": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "int_customers_retail", "resource_type": "model", "package_name": "bt_21_real_time", "path": "intermediate/int_customers_retail.sql", "original_file_path": "models/intermediate/int_customers_retail.sql", "unique_id": "model.bt_21_real_time.int_customers_retail", "fqn": ["bt_21_real_time", "intermediate", "int_customers_retail"], "alias": "int_customers_retail", "checksum": {"name": "sha256", "checksum": "d4b7b1d095ba64526f5e8abf33eb410e269204804981343647c81299dd683862"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bt_21_real_time://models/bt_backend_data.yml", "build_path": "target/run/bt_21_real_time/models/intermediate/int_customers_retail.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1686068133.854283, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.int_customers_retail", "raw_code": "with\n\n-- simple select from stage, no logic required\ncustomers as (\n   select * from {{ ref('stg_customers_retail') }}\n)\n\nselect\n    *,\n    -- we dont need sequential id, this can be removed\n    row_number() over (order by (select null)) as sequentialid --hacky solution to get sequentialid\nfrom customers", "language": "sql", "refs": [["stg_customers_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bt_21_real_time.stg_customers_retail"]}, "compiled_path": "target/compiled/bt_21_real_time/models/intermediate/int_customers_retail.sql", "compiled": true, "compiled_code": "with\n\n-- simple select from stage, no logic required\ncustomers as (\n   select * from PC_FIVETRAN_DB.dbt_real_time.stg_customers_retail\n)\n\nselect\n    *,\n    -- we dont need sequential id, this can be removed\n    row_number() over (order by (select null)) as sequentialid --hacky solution to get sequentialid\nfrom customers", "extra_ctes_injected": true, "extra_ctes": []}, "model.bt_21_real_time.retail_transaction_detail": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "retail_transaction_detail", "resource_type": "model", "package_name": "bt_21_real_time", "path": "marts/retail_transaction_detail.sql", "original_file_path": "models/marts/retail_transaction_detail.sql", "unique_id": "model.bt_21_real_time.retail_transaction_detail", "fqn": ["bt_21_real_time", "marts", "retail_transaction_detail"], "alias": "pos_transaction_detail", "checksum": {"name": "sha256", "checksum": "3e652870488a537f28c02196315b4042077e5c4715f5e181fd64cca49331cb4f"}, "config": {"enabled": true, "alias": "pos_transaction_detail", "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"saleid": {"name": "saleid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "bt_21_real_time://models/bt_backend_data.yml", "build_path": "target/run/bt_21_real_time/models/marts/retail_transaction_detail.sql", "deferred": false, "unrendered_config": {"materialized": "table", "alias": "pos_transaction_detail"}, "created_at": 1686068133.8787625, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.pos_transaction_detail", "raw_code": "with\n-- select mart transaction item\nsales as (\n    select *\n    from {{ ref('int_sales_retail') }}\n),\n\n-- select int products\nproducts as (\n    select *\n    from {{ ref('int_products_retail') }}\n),\n\n-- select mart dispensary\ndispensary as (\n    select *\n    from {{ ref('int_dispensary_retail') }}\n),\n\n-- select int customers\ncustomers as (\n    select *\n    from {{ ref('int_customers_retail') }}\n),\n\n-- group by product to get max product cost\n-- ideally we'd dedup well before this step. This will suffice for now\nproducts_aggregate as (\n    select\n        productid,\n        org,\n        category,\n        manufacturer,\n        producer,\n        product_strain,\n        straintype,\n        vendor,\n        inventorytype,\n        product_name,\n        max(costperunit) as costperunit\n    from\n        products\n    where productid is not null\n    group by\n        productid,\n        org,\n        category,\n        manufacturer,\n        producer,\n        product_strain,\n        straintype,\n        vendor,\n        inventorytype,\n        product_name\n),\n\ntransaction_joins as (\n\n    select\n        -- transaction item\n        sales.employee_userid as employee_name,\n        sales.productid,\n        sales.productid as legacy_product_id,\n        sales.saleid,\n        sales.ticketid,\n        sales.tax_collected_excise,\n\n        --cast(sales.transaction_time as date) as transaction_date,\n        cast(sales.datetime_timestamp_tz as date) as transaction_date,\n        cast(sales.weight as double precision) as item_quantity_weight,\n        --cast(sales.item_cost as double precision) as item_cost,\n        cast(sales.price as double precision) as item_prediscount_price,\n        cast(sales.discountamt as double precision) as item_total_discount,\n        cast(sales.price_post_discount as double precision) as item_final_pretax_price,\n        cast(sales.price + sales.pretaxprice as double precision) as item_final_price,\n        -- epoch time, utc 0\n        sales.datetime,\n        -- timestamp utc 0\n        sales.datetime_timestamp,\n        -- timestamp, time zone corrected\n        sales.datetime_timestamp_tz,\n        -- rename above for looker query\n        sales.datetime_timestamp_tz as date_time,\n        extract(year from sales.datetime_timestamp_tz) as year,\n        extract(month from sales.datetime_timestamp_tz) as month,\n        extract(day from sales.datetime_timestamp_tz) as day,\n\n        -- for cann 2.1 poc\n        sales.refunded as is_refunded,\n        -- adding this col, it is not originally in cann 2.0\n        sales.deleted as is_deleted,\n        -- replicate whats in pos trans detail\n        sha2(concat(sales.employee_userid,\n                sales.org,\n                sales.location)) as employee_id_hash,\n\n        -- dispensary and zip\n        dispensary.location_name as dispensary_name,\n        dispensary.locationtype as source_location_type,\n        dispensary.location_type_desc AS dispensary_license_type,\n        dispensary.orgname as organization_name,\n        dispensary.state as dispensary_state,\n        concat(dispensary.state, ' - ', dispensary.location_name) as dispensary_state_name,\n        dispensary.org as source_dispensary_org_id,\n        dispensary.location as source_dispensary_location_id,\n        dispensary.masterorg as source_master_org_id,\n        substr(dispensary.zip, 1, 3) as dispensary_zip3,\n        dispensary.zip as dispensary_zip5,\n\n        -- products\n        products_aggregate.inventorytype as source_inventorytype,\n        products_aggregate.category as source_category,\n        -- copy of above for cann 2.1 poc\n        products_aggregate.category as product_category,\n        products_aggregate.product_name as source_product_name,\n        -- DEI-236 adding this in without the rename\n        products_aggregate.product_name,\n\n        -- For cann 2.1\n        cast(products_aggregate.costperunit as double precision) as item_cost,\n        products_aggregate.category,\n        products_aggregate.manufacturer as source_manufacturer,\n        products_aggregate.producer as source_producer,\n        products_aggregate.product_strain as source_product_strain,\n        products_aggregate.product_strain as product_strain_name,\n        products_aggregate.straintype as source_straintype,\n        products_aggregate.vendor as source_vendor,\n        -- originally for DEI-198, modified for DEI-223,\n        -- not sure if this is the most accurate solution, but it will populate\n        coalesce(products_aggregate.manufacturer, products_aggregate.vendor, products_aggregate.producer) as product_manufacturer_name,\n\n        -- customers\n        -- for cann 2.1 poc\n        customers.zip as person_zip5,\n        substring(customers.zip, 1, 3) as person_zip3,\n        extract(year from customers.dob) as person_date_of_birth_yyyy,\n        customers.state as person_state,\n        customers.gender as person_gender,\n        CAST(CASE WHEN ismember > 0 THEN 1 ELSE 0 END AS boolean) as customer_loyalty_member,\n\n        -- consatns\n        cast(50 as double precision) as employee_upsell_target,\n        cast(0 as double precision) as item_total_tax,\n        -- cann 2.1 DEI-188\n        sales.price_post_discount*0.4 as estimated_cost,\n        -- DEI-223\n        current_timestamp() as extract_date,\n\n        -- concat\n        concat('10', '~', sales.org, '~', sales.location, '~', 'xxxx') as dispensary_id,\n        concat('10', '~', sales.org, '~', sales.location, '~', sales.ticketid) as transaction_id,\n        concat('10', '~', sales.org, '~', sales.location, '~', sales.saleid) as transaction_item_id,\n        concat('10', '~', sales.org, '~', sales.location, '~', sales.saleid) as transaction_item_id_hash,\n        concat('10', '~', sales.org, '~', sales.location, '~', sales.customerid) as resolved_cluster_id,\n        -- same as above.\n        concat('10', '~', sales.org, '~', sales.location, '~', sales.customerid) as person_id_hash,\n\n        -- filling in null columns needed for some dashboards\n        null as unit_type,\n        null as dispensary_store_size,\n        null as dispensary_latitude,\n        null as dispensary_longitude,\n        null as employee_sales_target,\n        null as product_id,\n        null as product_type,\n        null as product_form,\n        null as product_strain_type,\n        null as product_thc_content,\n        null as product_cbd_content,\n        null as product_thc_cbd_content_ratio,\n        null as patient_claims_payer,\n        null as descriptors,\n        null as product_subcategory,\n        null as product_subcategory1,\n        null as product_subcategory2,\n        null as resolved_store_name,\n        null as resolved_store_address,\n        null as source_guid_customer_hashed,\n        null as source_dispensary_id,\n        null as sales_id,\n        null as ticket_id,\n        null as bt_transaction_id,\n\n        -- from customers dataset\n        null as person_latitude,\n        null as person_longitude,\n        null as consumer_age_in_two_year_increments_person,\n        null as consumer_marital_status_in_the_household_100_description,\n        null as consumer_number_of_children_100,\n        null as consumer_home_owner_renter_100_description,\n        null as consumer_education_person_description,\n        null as consumer_occupation_person_description,\n        null as consumer_income_estimated_household_higher_ranges_description,\n        null as consumer_health_and_well_being_segmentation_the_invincibles_score,\n        null as consumer_health_and_well_being_segmentation_trusting_patients_score,\n        null as consumer_health_and_well_being_segmentation_healthy_holistics_score,\n        null as consumer_exercise_health_grouping,\n        null as consumer_make_a_purchase_via_internet_financial_score,\n        null as consumer_filled_rx_via_mail_order_in_the_last_12_months_score,\n        null as consumer_looked_for_medical_information_on_the_web_score,\n        null as consumer_consume_media_via_a_cell_phone_score,\n        null as consumer_consume_media_via_primetime_tv_score,\n        null as consumer_consume_media_via_radio_score,\n        null as consumer_consume_media_via_the_internet_score,\n        null as consumer_economic_stability_indicator_score,\n        null as consumer_lifestage_segment_description,\n        null as consumer_lifestage_group_description,\n        null as consumer_lifestage_insurance_group_description,\n        null as consumer_electronics,\n        -- DEI-256 removing data from this column, but keeping it in the table\n        null as location_type_desc_id\n\n    from sales\n    left join products_aggregate\n        on sales.productid = products_aggregate.productid\n        -- org should suffice, no location needed\n        and products_aggregate.org = sales.org\n    left join dispensary on dispensary.org = sales.org\n        and dispensary.location = sales.location\n    left join customers on customers.customerid = sales.customerid\n        and customers.org  = sales.org\n        and customers.location = sales.location\n\n)\n\n-- final select, filter out refunds and deletes\nselect *\nfrom transaction_joins\nwhere is_refunded = 0\n    and is_deleted = 0\n    and lower(left(dispensary_license_type, 5)) = 'dispe'", "language": "sql", "refs": [["int_sales_retail"], ["int_products_retail"], ["int_dispensary_retail"], ["int_customers_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bt_21_real_time.int_sales_retail", "model.bt_21_real_time.int_products_retail", "model.bt_21_real_time.int_dispensary_retail", "model.bt_21_real_time.int_customers_retail"]}, "compiled_path": "target/compiled/bt_21_real_time/models/marts/retail_transaction_detail.sql", "compiled": true, "compiled_code": "with\n-- select mart transaction item\nsales as (\n    select *\n    from PC_FIVETRAN_DB.dbt_real_time.int_sales_retail\n),\n\n-- select int products\nproducts as (\n    select *\n    from PC_FIVETRAN_DB.dbt_real_time.int_products_retail\n),\n\n-- select mart dispensary\ndispensary as (\n    select *\n    from PC_FIVETRAN_DB.dbt_real_time.int_dispensary_retail\n),\n\n-- select int customers\ncustomers as (\n    select *\n    from PC_FIVETRAN_DB.dbt_real_time.int_customers_retail\n),\n\n-- group by product to get max product cost\n-- ideally we'd dedup well before this step. This will suffice for now\nproducts_aggregate as (\n    select\n        productid,\n        org,\n        category,\n        manufacturer,\n        producer,\n        product_strain,\n        straintype,\n        vendor,\n        inventorytype,\n        product_name,\n        max(costperunit) as costperunit\n    from\n        products\n    where productid is not null\n    group by\n        productid,\n        org,\n        category,\n        manufacturer,\n        producer,\n        product_strain,\n        straintype,\n        vendor,\n        inventorytype,\n        product_name\n),\n\ntransaction_joins as (\n\n    select\n        -- transaction item\n        sales.employee_userid as employee_name,\n        sales.productid,\n        sales.productid as legacy_product_id,\n        sales.saleid,\n        sales.ticketid,\n        sales.tax_collected_excise,\n\n        --cast(sales.transaction_time as date) as transaction_date,\n        cast(sales.datetime_timestamp_tz as date) as transaction_date,\n        cast(sales.weight as double precision) as item_quantity_weight,\n        --cast(sales.item_cost as double precision) as item_cost,\n        cast(sales.price as double precision) as item_prediscount_price,\n        cast(sales.discountamt as double precision) as item_total_discount,\n        cast(sales.price_post_discount as double precision) as item_final_pretax_price,\n        cast(sales.price + sales.pretaxprice as double precision) as item_final_price,\n        -- epoch time, utc 0\n        sales.datetime,\n        -- timestamp utc 0\n        sales.datetime_timestamp,\n        -- timestamp, time zone corrected\n        sales.datetime_timestamp_tz,\n        -- rename above for looker query\n        sales.datetime_timestamp_tz as date_time,\n        extract(year from sales.datetime_timestamp_tz) as year,\n        extract(month from sales.datetime_timestamp_tz) as month,\n        extract(day from sales.datetime_timestamp_tz) as day,\n\n        -- for cann 2.1 poc\n        sales.refunded as is_refunded,\n        -- adding this col, it is not originally in cann 2.0\n        sales.deleted as is_deleted,\n        -- replicate whats in pos trans detail\n        sha2(concat(sales.employee_userid,\n                sales.org,\n                sales.location)) as employee_id_hash,\n\n        -- dispensary and zip\n        dispensary.location_name as dispensary_name,\n        dispensary.locationtype as source_location_type,\n        dispensary.location_type_desc AS dispensary_license_type,\n        dispensary.orgname as organization_name,\n        dispensary.state as dispensary_state,\n        concat(dispensary.state, ' - ', dispensary.location_name) as dispensary_state_name,\n        dispensary.org as source_dispensary_org_id,\n        dispensary.location as source_dispensary_location_id,\n        dispensary.masterorg as source_master_org_id,\n        substr(dispensary.zip, 1, 3) as dispensary_zip3,\n        dispensary.zip as dispensary_zip5,\n\n        -- products\n        products_aggregate.inventorytype as source_inventorytype,\n        products_aggregate.category as source_category,\n        -- copy of above for cann 2.1 poc\n        products_aggregate.category as product_category,\n        products_aggregate.product_name as source_product_name,\n        -- DEI-236 adding this in without the rename\n        products_aggregate.product_name,\n\n        -- For cann 2.1\n        cast(products_aggregate.costperunit as double precision) as item_cost,\n        products_aggregate.category,\n        products_aggregate.manufacturer as source_manufacturer,\n        products_aggregate.producer as source_producer,\n        products_aggregate.product_strain as source_product_strain,\n        products_aggregate.product_strain as product_strain_name,\n        products_aggregate.straintype as source_straintype,\n        products_aggregate.vendor as source_vendor,\n        -- originally for DEI-198, modified for DEI-223,\n        -- not sure if this is the most accurate solution, but it will populate\n        coalesce(products_aggregate.manufacturer, products_aggregate.vendor, products_aggregate.producer) as product_manufacturer_name,\n\n        -- customers\n        -- for cann 2.1 poc\n        customers.zip as person_zip5,\n        substring(customers.zip, 1, 3) as person_zip3,\n        extract(year from customers.dob) as person_date_of_birth_yyyy,\n        customers.state as person_state,\n        customers.gender as person_gender,\n        CAST(CASE WHEN ismember > 0 THEN 1 ELSE 0 END AS boolean) as customer_loyalty_member,\n\n        -- consatns\n        cast(50 as double precision) as employee_upsell_target,\n        cast(0 as double precision) as item_total_tax,\n        -- cann 2.1 DEI-188\n        sales.price_post_discount*0.4 as estimated_cost,\n        -- DEI-223\n        current_timestamp() as extract_date,\n\n        -- concat\n        concat('10', '~', sales.org, '~', sales.location, '~', 'xxxx') as dispensary_id,\n        concat('10', '~', sales.org, '~', sales.location, '~', sales.ticketid) as transaction_id,\n        concat('10', '~', sales.org, '~', sales.location, '~', sales.saleid) as transaction_item_id,\n        concat('10', '~', sales.org, '~', sales.location, '~', sales.saleid) as transaction_item_id_hash,\n        concat('10', '~', sales.org, '~', sales.location, '~', sales.customerid) as resolved_cluster_id,\n        -- same as above.\n        concat('10', '~', sales.org, '~', sales.location, '~', sales.customerid) as person_id_hash,\n\n        -- filling in null columns needed for some dashboards\n        null as unit_type,\n        null as dispensary_store_size,\n        null as dispensary_latitude,\n        null as dispensary_longitude,\n        null as employee_sales_target,\n        null as product_id,\n        null as product_type,\n        null as product_form,\n        null as product_strain_type,\n        null as product_thc_content,\n        null as product_cbd_content,\n        null as product_thc_cbd_content_ratio,\n        null as patient_claims_payer,\n        null as descriptors,\n        null as product_subcategory,\n        null as product_subcategory1,\n        null as product_subcategory2,\n        null as resolved_store_name,\n        null as resolved_store_address,\n        null as source_guid_customer_hashed,\n        null as source_dispensary_id,\n        null as sales_id,\n        null as ticket_id,\n        null as bt_transaction_id,\n\n        -- from customers dataset\n        null as person_latitude,\n        null as person_longitude,\n        null as consumer_age_in_two_year_increments_person,\n        null as consumer_marital_status_in_the_household_100_description,\n        null as consumer_number_of_children_100,\n        null as consumer_home_owner_renter_100_description,\n        null as consumer_education_person_description,\n        null as consumer_occupation_person_description,\n        null as consumer_income_estimated_household_higher_ranges_description,\n        null as consumer_health_and_well_being_segmentation_the_invincibles_score,\n        null as consumer_health_and_well_being_segmentation_trusting_patients_score,\n        null as consumer_health_and_well_being_segmentation_healthy_holistics_score,\n        null as consumer_exercise_health_grouping,\n        null as consumer_make_a_purchase_via_internet_financial_score,\n        null as consumer_filled_rx_via_mail_order_in_the_last_12_months_score,\n        null as consumer_looked_for_medical_information_on_the_web_score,\n        null as consumer_consume_media_via_a_cell_phone_score,\n        null as consumer_consume_media_via_primetime_tv_score,\n        null as consumer_consume_media_via_radio_score,\n        null as consumer_consume_media_via_the_internet_score,\n        null as consumer_economic_stability_indicator_score,\n        null as consumer_lifestage_segment_description,\n        null as consumer_lifestage_group_description,\n        null as consumer_lifestage_insurance_group_description,\n        null as consumer_electronics,\n        -- DEI-256 removing data from this column, but keeping it in the table\n        null as location_type_desc_id\n\n    from sales\n    left join products_aggregate\n        on sales.productid = products_aggregate.productid\n        -- org should suffice, no location needed\n        and products_aggregate.org = sales.org\n    left join dispensary on dispensary.org = sales.org\n        and dispensary.location = sales.location\n    left join customers on customers.customerid = sales.customerid\n        and customers.org  = sales.org\n        and customers.location = sales.location\n\n)\n\n-- final select, filter out refunds and deletes\nselect *\nfrom transaction_joins\nwhere is_refunded = 0\n    and is_deleted = 0\n    and lower(left(dispensary_license_type, 5)) = 'dispe'", "extra_ctes_injected": true, "extra_ctes": []}, "model.bt_21_real_time.retail_dispensary_all_views": {"database": "PC_FIVETRAN_DB", "schema": "dbt_real_time", "name": "retail_dispensary_all_views", "resource_type": "model", "package_name": "bt_21_real_time", "path": "marts/retail_dispensary_all_views.sql", "original_file_path": "models/marts/retail_dispensary_all_views.sql", "unique_id": "model.bt_21_real_time.retail_dispensary_all_views", "fqn": ["bt_21_real_time", "marts", "retail_dispensary_all_views"], "alias": "retail_dispensary_all_views", "checksum": {"name": "sha256", "checksum": "5ce8cf6cae62c7446f099b2270d3717104b97d552951eacd07b2321cd944dfcd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": "target/run/bt_21_real_time/models/marts/retail_dispensary_all_views.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1686068133.7954688, "relation_name": "PC_FIVETRAN_DB.dbt_real_time.retail_dispensary_all_views", "raw_code": "with pos_transaction_detail as (\n    select *\n    from {{ ref('retail_transaction_detail') }}\n),\n\nselect_and_filter as (\n    select\n        distinct dispensary_id,\n        organization_name::string as organization_name,\n        trim(dispensary_name) AS dispensary_name,\n        dispensary_store_size::string as dispensary_store_size,\n        dispensary_license_type::string as dispensary_license_type,\n        dispensary_zip3::string as dispensary_zip3,\n        dispensary_zip5,\n        dispensary_latitude::double as dispensary_latitude,\n        dispensary_longitude::double as dispensary_longitude,\n        dispensary_state,\n        null as dispensary_state_name,\n        source_dispensary_id::integer as source_dispensary_id,\n        source_dispensary_location_id::integer as source_dispensary_location_id,\n        source_dispensary_org_id::integer as source_dispensary_org_id,\n        source_master_org_id::integer as source_master_org_id,\n        -- DEI-223\n        current_timestamp() as extract_date\n\n    from pos_transaction_detail\n    where left(dispensary_id, 9) != '10~100047'\n        and lower(left(dispensary_license_type::string,5)) = 'dispe'\n        and to_date(datetime_timestamp) = (select max(to_date(datetime_timestamp)) from POS_TRANSACTION_DETAIL)\n)\n\nselect * from select_and_filter", "language": "sql", "refs": [["retail_transaction_detail"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.bt_21_real_time.retail_transaction_detail"]}, "compiled_path": "target/compiled/bt_21_real_time/models/marts/retail_dispensary_all_views.sql", "compiled": true, "compiled_code": "with pos_transaction_detail as (\n    select *\n    from PC_FIVETRAN_DB.dbt_real_time.pos_transaction_detail\n),\n\nselect_and_filter as (\n    select\n        distinct dispensary_id,\n        organization_name::string as organization_name,\n        trim(dispensary_name) AS dispensary_name,\n        dispensary_store_size::string as dispensary_store_size,\n        dispensary_license_type::string as dispensary_license_type,\n        dispensary_zip3::string as dispensary_zip3,\n        dispensary_zip5,\n        dispensary_latitude::double as dispensary_latitude,\n        dispensary_longitude::double as dispensary_longitude,\n        dispensary_state,\n        null as dispensary_state_name,\n        source_dispensary_id::integer as source_dispensary_id,\n        source_dispensary_location_id::integer as source_dispensary_location_id,\n        source_dispensary_org_id::integer as source_dispensary_org_id,\n        source_master_org_id::integer as source_master_org_id,\n        -- DEI-223\n        current_timestamp() as extract_date\n\n    from pos_transaction_detail\n    where left(dispensary_id, 9) != '10~100047'\n        and lower(left(dispensary_license_type::string,5)) = 'dispe'\n        and to_date(datetime_timestamp) = (select max(to_date(datetime_timestamp)) from POS_TRANSACTION_DETAIL)\n)\n\nselect * from select_and_filter", "extra_ctes_injected": true, "extra_ctes": []}, "test.bt_21_real_time.not_null_stg_customers_retail_customerid.9ff3b43521": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customerid", "model": "{{ get_where_subquery(ref('stg_customers_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_customers_retail_customerid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_customers_retail_customerid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_customers_retail_customerid.9ff3b43521", "fqn": ["bt_21_real_time", "not_null_stg_customers_retail_customerid"], "alias": "not_null_stg_customers_retail_customerid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068133.8931806, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_customers_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bt_21_real_time.stg_customers_retail"]}, "compiled_path": null, "column_name": "customerid", "file_key_name": "models.stg_customers_retail"}, "test.bt_21_real_time.not_null_stg_customers_retail_org.253f904950": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "org", "model": "{{ get_where_subquery(ref('stg_customers_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_customers_retail_org", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_customers_retail_org.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_customers_retail_org.253f904950", "fqn": ["bt_21_real_time", "not_null_stg_customers_retail_org"], "alias": "not_null_stg_customers_retail_org", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068133.8953843, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_customers_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bt_21_real_time.stg_customers_retail"]}, "compiled_path": null, "column_name": "org", "file_key_name": "models.stg_customers_retail"}, "test.bt_21_real_time.not_null_stg_customers_retail_location.49f36794af": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "location", "model": "{{ get_where_subquery(ref('stg_customers_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_customers_retail_location", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_customers_retail_location.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_customers_retail_location.49f36794af", "fqn": ["bt_21_real_time", "not_null_stg_customers_retail_location"], "alias": "not_null_stg_customers_retail_location", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068133.8972573, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_customers_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bt_21_real_time.stg_customers_retail"]}, "compiled_path": null, "column_name": "location", "file_key_name": "models.stg_customers_retail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_customers_retail_org__location__customerid.e1fb7d6a94": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["org", "location", "customerid"], "model": "{{ get_where_subquery(ref('stg_customers_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_customers_retail_org__location__customerid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_6228661346eebca58f2c6ed1ace5153f.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_customers_retail_org__location__customerid.e1fb7d6a94", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_stg_customers_retail_org__location__customerid"], "alias": "dbt_utils_unique_combination_o_6228661346eebca58f2c6ed1ace5153f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6228661346eebca58f2c6ed1ace5153f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6228661346eebca58f2c6ed1ace5153f"}, "created_at": 1686068133.8991754, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6228661346eebca58f2c6ed1ace5153f\") }}", "language": "sql", "refs": [["stg_customers_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_customers_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_customers_retail"}, "test.bt_21_real_time.table_is_empty_stg_customers_retail_.ff7c636081": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_customers_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_customers_retail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_customers_retail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_customers_retail_.ff7c636081", "fqn": ["bt_21_real_time", "table_is_empty_stg_customers_retail_"], "alias": "table_is_empty_stg_customers_retail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068133.908727, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_customers_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_customers_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_customers_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_customers_retail_day__extract_date__1.03d2719bfe": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_customers_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_customers_retail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_customers_retail_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_customers_retail_day__extract_date__1.03d2719bfe", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_customers_retail_day__extract_date__1"], "alias": "dbt_utils_recency_stg_customers_retail_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068133.9141784, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_customers_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_customers_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_customers_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_customers_retail_day__created__1.fdc943d26a": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "created", "interval": 1, "model": "{{ get_where_subquery(ref('stg_customers_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_customers_retail_day__created__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_customers_retail_day__created__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_customers_retail_day__created__1.fdc943d26a", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_customers_retail_day__created__1"], "alias": "dbt_utils_recency_stg_customers_retail_day__created__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068133.9189951, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_customers_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_customers_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_customers_retail"}, "test.bt_21_real_time.not_null_stg_inventory_retail_id.7c9e00423f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_inventory_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_inventory_retail_id", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_inventory_retail_id.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_inventory_retail_id.7c9e00423f", "fqn": ["bt_21_real_time", "not_null_stg_inventory_retail_id"], "alias": "not_null_stg_inventory_retail_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068133.9235108, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventory_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bt_21_real_time.stg_inventory_retail"]}, "compiled_path": null, "column_name": "id", "file_key_name": "models.stg_inventory_retail"}, "test.bt_21_real_time.not_null_stg_inventory_retail_location.55782909d4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "location", "model": "{{ get_where_subquery(ref('stg_inventory_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_inventory_retail_location", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_inventory_retail_location.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_inventory_retail_location.55782909d4", "fqn": ["bt_21_real_time", "not_null_stg_inventory_retail_location"], "alias": "not_null_stg_inventory_retail_location", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068133.9256008, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventory_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bt_21_real_time.stg_inventory_retail"]}, "compiled_path": null, "column_name": "location", "file_key_name": "models.stg_inventory_retail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventory_retail_org__location__id.539731e71c": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["org", "location", "id"], "model": "{{ get_where_subquery(ref('stg_inventory_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_inventory_retail_org__location__id", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_cbec19348f0b7dd7aeedf457c2c13897.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventory_retail_org__location__id.539731e71c", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_stg_inventory_retail_org__location__id"], "alias": "dbt_utils_unique_combination_o_cbec19348f0b7dd7aeedf457c2c13897", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_cbec19348f0b7dd7aeedf457c2c13897", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_cbec19348f0b7dd7aeedf457c2c13897"}, "created_at": 1686068133.927448, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_cbec19348f0b7dd7aeedf457c2c13897\") }}", "language": "sql", "refs": [["stg_inventory_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_inventory_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventory_retail"}, "test.bt_21_real_time.table_is_empty_stg_inventory_retail_.0a8bc5858b": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_inventory_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_inventory_retail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_inventory_retail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_inventory_retail_.0a8bc5858b", "fqn": ["bt_21_real_time", "table_is_empty_stg_inventory_retail_"], "alias": "table_is_empty_stg_inventory_retail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068133.9326468, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventory_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_inventory_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventory_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_inventory_retail_day__extract_date__1.e6a9694bba": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_inventory_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_inventory_retail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_inventory_retail_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_inventory_retail_day__extract_date__1.e6a9694bba", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_inventory_retail_day__extract_date__1"], "alias": "dbt_utils_recency_stg_inventory_retail_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068133.9367418, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventory_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_inventory_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventory_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_inventory_retail_day__sessiontime_timestamp__1.4da9d5f636": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "sessiontime_timestamp", "interval": 1, "model": "{{ get_where_subquery(ref('stg_inventory_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_inventory_retail_day__sessiontime_timestamp__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_inventor_838106cd3b73a7804db0f35da07c0c87.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_inventory_retail_day__sessiontime_timestamp__1.4da9d5f636", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_inventory_retail_day__sessiontime_timestamp__1"], "alias": "dbt_utils_recency_stg_inventor_838106cd3b73a7804db0f35da07c0c87", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_stg_inventor_838106cd3b73a7804db0f35da07c0c87", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_recency_stg_inventor_838106cd3b73a7804db0f35da07c0c87"}, "created_at": 1686068133.9416494, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_recency_stg_inventor_838106cd3b73a7804db0f35da07c0c87\") }}", "language": "sql", "refs": [["stg_inventory_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_inventory_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventory_retail"}, "test.bt_21_real_time.not_null_stg_inventorylogs_retail_logid.f009d09a1c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "logid", "model": "{{ get_where_subquery(ref('stg_inventorylogs_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_inventorylogs_retail_logid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_inventorylogs_retail_logid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_inventorylogs_retail_logid.f009d09a1c", "fqn": ["bt_21_real_time", "not_null_stg_inventorylogs_retail_logid"], "alias": "not_null_stg_inventorylogs_retail_logid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068133.946571, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventorylogs_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "logid", "file_key_name": "models.stg_inventorylogs_retail"}, "test.bt_21_real_time.not_null_stg_inventorylogs_retail_inventoryid.736e98b0c7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "inventoryid", "model": "{{ get_where_subquery(ref('stg_inventorylogs_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_inventorylogs_retail_inventoryid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_inventorylogs_retail_inventoryid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_inventorylogs_retail_inventoryid.736e98b0c7", "fqn": ["bt_21_real_time", "not_null_stg_inventorylogs_retail_inventoryid"], "alias": "not_null_stg_inventorylogs_retail_inventoryid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068133.9486177, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventorylogs_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "inventoryid", "file_key_name": "models.stg_inventorylogs_retail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventorylogs_retail_org__location__inventoryid.f3b318625a": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["org", "location", "inventoryid"], "model": "{{ get_where_subquery(ref('stg_inventorylogs_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_inventorylogs_retail_org__location__inventoryid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_6437f832d926842969f8b54028400b56.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventorylogs_retail_org__location__inventoryid.f3b318625a", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_stg_inventorylogs_retail_org__location__inventoryid"], "alias": "dbt_utils_unique_combination_o_6437f832d926842969f8b54028400b56", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_6437f832d926842969f8b54028400b56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6437f832d926842969f8b54028400b56"}, "created_at": 1686068133.9504447, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6437f832d926842969f8b54028400b56\") }}", "language": "sql", "refs": [["stg_inventorylogs_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventorylogs_retail"}, "test.bt_21_real_time.table_is_empty_stg_inventorylogs_retail_.ede3491614": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_inventorylogs_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_inventorylogs_retail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_inventorylogs_retail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_inventorylogs_retail_.ede3491614", "fqn": ["bt_21_real_time", "table_is_empty_stg_inventorylogs_retail_"], "alias": "table_is_empty_stg_inventorylogs_retail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068133.9558158, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventorylogs_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventorylogs_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_inventorylogs_retail_day__extract_date__1.c80db2c2fa": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_inventorylogs_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_inventorylogs_retail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_inventorylogs_retail_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_inventorylogs_retail_day__extract_date__1.c80db2c2fa", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_inventorylogs_retail_day__extract_date__1"], "alias": "dbt_utils_recency_stg_inventorylogs_retail_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068133.9595785, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventorylogs_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventorylogs_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_inventorylogs_retail_day__sessiontime_timestamp__1.7fd0669391": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "sessiontime_timestamp", "interval": 1, "model": "{{ get_where_subquery(ref('stg_inventorylogs_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_inventorylogs_retail_day__sessiontime_timestamp__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_inventor_aeafdc59b0b2e44f59f7b233214e095e.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_inventorylogs_retail_day__sessiontime_timestamp__1.7fd0669391", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_inventorylogs_retail_day__sessiontime_timestamp__1"], "alias": "dbt_utils_recency_stg_inventor_aeafdc59b0b2e44f59f7b233214e095e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_recency_stg_inventor_aeafdc59b0b2e44f59f7b233214e095e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_recency_stg_inventor_aeafdc59b0b2e44f59f7b233214e095e"}, "created_at": 1686068133.9643574, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_recency_stg_inventor_aeafdc59b0b2e44f59f7b233214e095e\") }}", "language": "sql", "refs": [["stg_inventorylogs_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventorylogs_retail"}, "test.bt_21_real_time.not_null_stg_inventory_rooms_retail_id.504fc91af6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_inventory_rooms_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_inventory_rooms_retail_id", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_inventory_rooms_retail_id.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_inventory_rooms_retail_id.504fc91af6", "fqn": ["bt_21_real_time", "not_null_stg_inventory_rooms_retail_id"], "alias": "not_null_stg_inventory_rooms_retail_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068133.969368, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventory_rooms_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bt_21_real_time.stg_inventory_rooms_retail"]}, "compiled_path": null, "column_name": "id", "file_key_name": "models.stg_inventory_rooms_retail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventory_rooms_retail_org__id.5e24e4312f": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["org", "id"], "model": "{{ get_where_subquery(ref('stg_inventory_rooms_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_inventory_rooms_retail_org__id", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_72542bb337259b7d9957f9432ec34372.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventory_rooms_retail_org__id.5e24e4312f", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_stg_inventory_rooms_retail_org__id"], "alias": "dbt_utils_unique_combination_o_72542bb337259b7d9957f9432ec34372", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_72542bb337259b7d9957f9432ec34372", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_72542bb337259b7d9957f9432ec34372"}, "created_at": 1686068133.971236, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_72542bb337259b7d9957f9432ec34372\") }}", "language": "sql", "refs": [["stg_inventory_rooms_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_inventory_rooms_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventory_rooms_retail"}, "test.bt_21_real_time.table_is_empty_stg_inventory_rooms_retail_.207a4e8cfd": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_inventory_rooms_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_inventory_rooms_retail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_inventory_rooms_retail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_inventory_rooms_retail_.207a4e8cfd", "fqn": ["bt_21_real_time", "table_is_empty_stg_inventory_rooms_retail_"], "alias": "table_is_empty_stg_inventory_rooms_retail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068133.9762716, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventory_rooms_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_inventory_rooms_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventory_rooms_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_inventory_rooms_retail_day__extract_date__1.cd63107e56": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_inventory_rooms_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_inventory_rooms_retail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_inventor_579e9a7162291b7d0e9624e5b01f7202.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_inventory_rooms_retail_day__extract_date__1.cd63107e56", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_inventory_rooms_retail_day__extract_date__1"], "alias": "dbt_utils_recency_stg_inventor_579e9a7162291b7d0e9624e5b01f7202", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_stg_inventor_579e9a7162291b7d0e9624e5b01f7202", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_recency_stg_inventor_579e9a7162291b7d0e9624e5b01f7202"}, "created_at": 1686068133.9800441, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_recency_stg_inventor_579e9a7162291b7d0e9624e5b01f7202\") }}", "language": "sql", "refs": [["stg_inventory_rooms_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_inventory_rooms_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventory_rooms_retail"}, "test.bt_21_real_time.not_null_stg_inventorytypes_retail_id.22e56b513c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_inventorytypes_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_inventorytypes_retail_id", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_inventorytypes_retail_id.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_inventorytypes_retail_id.22e56b513c", "fqn": ["bt_21_real_time", "not_null_stg_inventorytypes_retail_id"], "alias": "not_null_stg_inventorytypes_retail_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068133.9850805, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventorytypes_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "id", "file_key_name": "models.stg_inventorytypes_retail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventorytypes_retail_org__id.3c502bbaf0": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["org", "id"], "model": "{{ get_where_subquery(ref('stg_inventorytypes_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_inventorytypes_retail_org__id", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_568cb00f6ebd33756e71d7413eb55335.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventorytypes_retail_org__id.3c502bbaf0", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_stg_inventorytypes_retail_org__id"], "alias": "dbt_utils_unique_combination_o_568cb00f6ebd33756e71d7413eb55335", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_568cb00f6ebd33756e71d7413eb55335", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_568cb00f6ebd33756e71d7413eb55335"}, "created_at": 1686068133.98696, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_568cb00f6ebd33756e71d7413eb55335\") }}", "language": "sql", "refs": [["stg_inventorytypes_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventorytypes_retail"}, "test.bt_21_real_time.table_is_empty_stg_inventorytypes_retail_.81dbf99bb5": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_inventorytypes_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_inventorytypes_retail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_inventorytypes_retail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_inventorytypes_retail_.81dbf99bb5", "fqn": ["bt_21_real_time", "table_is_empty_stg_inventorytypes_retail_"], "alias": "table_is_empty_stg_inventorytypes_retail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068133.9920223, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventorytypes_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventorytypes_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_inventorytypes_retail_day__extract_date__1.14b2d45a77": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_inventorytypes_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_inventorytypes_retail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_inventor_e984f578cee37b04d778ed74029b2c64.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_inventorytypes_retail_day__extract_date__1.14b2d45a77", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_inventorytypes_retail_day__extract_date__1"], "alias": "dbt_utils_recency_stg_inventor_e984f578cee37b04d778ed74029b2c64", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_recency_stg_inventor_e984f578cee37b04d778ed74029b2c64", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_recency_stg_inventor_e984f578cee37b04d778ed74029b2c64"}, "created_at": 1686068133.995855, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_recency_stg_inventor_e984f578cee37b04d778ed74029b2c64\") }}", "language": "sql", "refs": [["stg_inventorytypes_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventorytypes_retail"}, "test.bt_21_real_time.not_null_stg_locations_retail_location.2acb349222": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "location", "model": "{{ get_where_subquery(ref('stg_locations_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_locations_retail_location", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_locations_retail_location.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_locations_retail_location.2acb349222", "fqn": ["bt_21_real_time", "not_null_stg_locations_retail_location"], "alias": "not_null_stg_locations_retail_location", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.0013587, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_locations_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bt_21_real_time.stg_locations_retail"]}, "compiled_path": null, "column_name": "location", "file_key_name": "models.stg_locations_retail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_locations_retail_org__location.18e2e8ef35": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["org", "location"], "model": "{{ get_where_subquery(ref('stg_locations_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_locations_retail_org__location", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_08c9766f88dbda63986ee845099afc19.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_locations_retail_org__location.18e2e8ef35", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_stg_locations_retail_org__location"], "alias": "dbt_utils_unique_combination_o_08c9766f88dbda63986ee845099afc19", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_08c9766f88dbda63986ee845099afc19", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_08c9766f88dbda63986ee845099afc19"}, "created_at": 1686068134.0031931, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_08c9766f88dbda63986ee845099afc19\") }}", "language": "sql", "refs": [["stg_locations_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_locations_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_locations_retail"}, "test.bt_21_real_time.table_is_empty_stg_locations_retail_.151aec3eb4": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_locations_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_locations_retail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_locations_retail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_locations_retail_.151aec3eb4", "fqn": ["bt_21_real_time", "table_is_empty_stg_locations_retail_"], "alias": "table_is_empty_stg_locations_retail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.0081623, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_locations_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_locations_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_locations_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_locations_retail_day__extract_date__1.6a6d76302e": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_locations_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_locations_retail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_locations_retail_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_locations_retail_day__extract_date__1.6a6d76302e", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_locations_retail_day__extract_date__1"], "alias": "dbt_utils_recency_stg_locations_retail_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.012175, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_locations_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_locations_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_locations_retail"}, "test.bt_21_real_time.not_null_stg_payments_retail_ticketid.aec60dcd60": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ticketid", "model": "{{ get_where_subquery(ref('stg_payments_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_payments_retail_ticketid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_payments_retail_ticketid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_payments_retail_ticketid.aec60dcd60", "fqn": ["bt_21_real_time", "not_null_stg_payments_retail_ticketid"], "alias": "not_null_stg_payments_retail_ticketid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.0167496, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_payments_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bt_21_real_time.stg_payments_retail"]}, "compiled_path": null, "column_name": "ticketid", "file_key_name": "models.stg_payments_retail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_payments_retail_org__location__ticketid.e622a84b75": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["org", "location", "ticketid"], "model": "{{ get_where_subquery(ref('stg_payments_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_payments_retail_org__location__ticketid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_ea0d487fefa369f3330021e0c5343e7c.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_payments_retail_org__location__ticketid.e622a84b75", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_stg_payments_retail_org__location__ticketid"], "alias": "dbt_utils_unique_combination_o_ea0d487fefa369f3330021e0c5343e7c", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ea0d487fefa369f3330021e0c5343e7c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ea0d487fefa369f3330021e0c5343e7c"}, "created_at": 1686068134.0188587, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ea0d487fefa369f3330021e0c5343e7c\") }}", "language": "sql", "refs": [["stg_payments_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_payments_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_payments_retail"}, "test.bt_21_real_time.table_is_empty_stg_payments_retail_.4b1740aa92": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_payments_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_payments_retail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_payments_retail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_payments_retail_.4b1740aa92", "fqn": ["bt_21_real_time", "table_is_empty_stg_payments_retail_"], "alias": "table_is_empty_stg_payments_retail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.0239532, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_payments_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_payments_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_payments_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_payments_retail_day__extract_date__1.b5cdc6ee57": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_payments_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_payments_retail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_payments_retail_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_payments_retail_day__extract_date__1.b5cdc6ee57", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_payments_retail_day__extract_date__1"], "alias": "dbt_utils_recency_stg_payments_retail_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.0279222, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_payments_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_payments_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_payments_retail"}, "test.bt_21_real_time.not_null_stg_product_categories_retail_product_categories_id.75b1ab44b6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_categories_id", "model": "{{ get_where_subquery(ref('stg_product_categories_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_product_categories_retail_product_categories_id", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_product_categories_retail_product_categories_id.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_product_categories_retail_product_categories_id.75b1ab44b6", "fqn": ["bt_21_real_time", "not_null_stg_product_categories_retail_product_categories_id"], "alias": "not_null_stg_product_categories_retail_product_categories_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.0327153, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_product_categories_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bt_21_real_time.stg_product_categories_retail"]}, "compiled_path": null, "column_name": "product_categories_id", "file_key_name": "models.stg_product_categories_retail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_product_categories_retail_org__location__product_categories_id.66859d1473": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["org", "location", "product_categories_id"], "model": "{{ get_where_subquery(ref('stg_product_categories_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_product_categories_retail_org__location__product_categories_id", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_40413b70698b3972d3c5ae40bd00619e.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_product_categories_retail_org__location__product_categories_id.66859d1473", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_stg_product_categories_retail_org__location__product_categories_id"], "alias": "dbt_utils_unique_combination_o_40413b70698b3972d3c5ae40bd00619e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_40413b70698b3972d3c5ae40bd00619e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_40413b70698b3972d3c5ae40bd00619e"}, "created_at": 1686068134.034554, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_40413b70698b3972d3c5ae40bd00619e\") }}", "language": "sql", "refs": [["stg_product_categories_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_product_categories_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_product_categories_retail"}, "test.bt_21_real_time.table_is_empty_stg_product_categories_retail_.7e5f962247": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_product_categories_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_product_categories_retail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_product_categories_retail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_product_categories_retail_.7e5f962247", "fqn": ["bt_21_real_time", "table_is_empty_stg_product_categories_retail_"], "alias": "table_is_empty_stg_product_categories_retail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.039928, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_product_categories_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_product_categories_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_product_categories_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_product_categories_retail_day__extract_date__1.f7028b0373": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_product_categories_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_product_categories_retail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_product__ea0625550afe855520978fb6cc66e982.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_product_categories_retail_day__extract_date__1.f7028b0373", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_product_categories_retail_day__extract_date__1"], "alias": "dbt_utils_recency_stg_product__ea0625550afe855520978fb6cc66e982", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_stg_product__ea0625550afe855520978fb6cc66e982", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_recency_stg_product__ea0625550afe855520978fb6cc66e982"}, "created_at": 1686068134.0437162, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_recency_stg_product__ea0625550afe855520978fb6cc66e982\") }}", "language": "sql", "refs": [["stg_product_categories_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_product_categories_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_product_categories_retail"}, "test.bt_21_real_time.not_null_stg_products_retail_productid.04cc83f906": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "productid", "model": "{{ get_where_subquery(ref('stg_products_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_products_retail_productid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_products_retail_productid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_products_retail_productid.04cc83f906", "fqn": ["bt_21_real_time", "not_null_stg_products_retail_productid"], "alias": "not_null_stg_products_retail_productid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.0487018, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_products_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bt_21_real_time.stg_products_retail"]}, "compiled_path": null, "column_name": "productid", "file_key_name": "models.stg_products_retail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_products_retail_org__productid.b104fe6137": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["org", "productid"], "model": "{{ get_where_subquery(ref('stg_products_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_products_retail_org__productid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_134ef68b0a128a166da9f87ff785e70d.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_products_retail_org__productid.b104fe6137", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_stg_products_retail_org__productid"], "alias": "dbt_utils_unique_combination_o_134ef68b0a128a166da9f87ff785e70d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_134ef68b0a128a166da9f87ff785e70d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_134ef68b0a128a166da9f87ff785e70d"}, "created_at": 1686068134.050538, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_134ef68b0a128a166da9f87ff785e70d\") }}", "language": "sql", "refs": [["stg_products_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_products_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_products_retail"}, "test.bt_21_real_time.table_is_empty_stg_products_retail_.5948848e4b": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_products_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_products_retail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_products_retail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_products_retail_.5948848e4b", "fqn": ["bt_21_real_time", "table_is_empty_stg_products_retail_"], "alias": "table_is_empty_stg_products_retail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.055547, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_products_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_products_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_products_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_products_retail_day__extract_date__1.0a22e661ef": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_products_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_products_retail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_products_retail_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_products_retail_day__extract_date__1.0a22e661ef", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_products_retail_day__extract_date__1"], "alias": "dbt_utils_recency_stg_products_retail_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.0593214, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_products_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_products_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_products_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_products_retail_day__created__1.f888efd9d6": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "created", "interval": 1, "model": "{{ get_where_subquery(ref('stg_products_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_products_retail_day__created__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_products_retail_day__created__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_products_retail_day__created__1.f888efd9d6", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_products_retail_day__created__1"], "alias": "dbt_utils_recency_stg_products_retail_day__created__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.0641503, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_products_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_products_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_products_retail"}, "test.bt_21_real_time.not_null_stg_productslogs_retail_logid.3e605a877d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "logid", "model": "{{ get_where_subquery(ref('stg_productslogs_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_productslogs_retail_logid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_productslogs_retail_logid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_productslogs_retail_logid.3e605a877d", "fqn": ["bt_21_real_time", "not_null_stg_productslogs_retail_logid"], "alias": "not_null_stg_productslogs_retail_logid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.0693123, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_productslogs_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "logid", "file_key_name": "models.stg_productslogs_retail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_productslogs_retail_logid__org__location__productid.cc5aa84621": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["logid", "org", "location", "productid"], "model": "{{ get_where_subquery(ref('stg_productslogs_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_productslogs_retail_logid__org__location__productid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_885a4dd4ef63bda59ad679df8fa8d572.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_productslogs_retail_logid__org__location__productid.cc5aa84621", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_stg_productslogs_retail_logid__org__location__productid"], "alias": "dbt_utils_unique_combination_o_885a4dd4ef63bda59ad679df8fa8d572", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_885a4dd4ef63bda59ad679df8fa8d572", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_885a4dd4ef63bda59ad679df8fa8d572"}, "created_at": 1686068134.0714693, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_885a4dd4ef63bda59ad679df8fa8d572\") }}", "language": "sql", "refs": [["stg_productslogs_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_productslogs_retail"}, "test.bt_21_real_time.table_is_empty_stg_productslogs_retail_.84d4e26014": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_productslogs_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_productslogs_retail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_productslogs_retail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_productslogs_retail_.84d4e26014", "fqn": ["bt_21_real_time", "table_is_empty_stg_productslogs_retail_"], "alias": "table_is_empty_stg_productslogs_retail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.0772517, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_productslogs_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_productslogs_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_productslogs_retail_day__extract_date__1.68e395fbef": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_productslogs_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_productslogs_retail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_productslogs_retail_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_productslogs_retail_day__extract_date__1.68e395fbef", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_productslogs_retail_day__extract_date__1"], "alias": "dbt_utils_recency_stg_productslogs_retail_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.0810375, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_productslogs_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_productslogs_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_productslogs_retail_day__sessiontime_timestamp__1.b404cce0ba": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "sessiontime_timestamp", "interval": 1, "model": "{{ get_where_subquery(ref('stg_productslogs_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_productslogs_retail_day__sessiontime_timestamp__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_products_004c2e562e40c8bdc3c9a74faae6fc38.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_productslogs_retail_day__sessiontime_timestamp__1.b404cce0ba", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_productslogs_retail_day__sessiontime_timestamp__1"], "alias": "dbt_utils_recency_stg_products_004c2e562e40c8bdc3c9a74faae6fc38", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_recency_stg_products_004c2e562e40c8bdc3c9a74faae6fc38", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_recency_stg_products_004c2e562e40c8bdc3c9a74faae6fc38"}, "created_at": 1686068134.0862734, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_recency_stg_products_004c2e562e40c8bdc3c9a74faae6fc38\") }}", "language": "sql", "refs": [["stg_productslogs_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_productslogs_retail"}, "test.bt_21_real_time.not_null_stg_sales_retail_saleid.f2fb626ea2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "saleid", "model": "{{ get_where_subquery(ref('stg_sales_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_sales_retail_saleid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_sales_retail_saleid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_sales_retail_saleid.f2fb626ea2", "fqn": ["bt_21_real_time", "not_null_stg_sales_retail_saleid"], "alias": "not_null_stg_sales_retail_saleid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.091291, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sales_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bt_21_real_time.stg_sales_retail"]}, "compiled_path": null, "column_name": "saleid", "file_key_name": "models.stg_sales_retail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_sales_retail_org__location__saleid.b086e8f2b4": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["org", "location", "saleid"], "model": "{{ get_where_subquery(ref('stg_sales_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_sales_retail_org__location__saleid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_c1463cfb31159314e7e1b9b7e495d77e.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_sales_retail_org__location__saleid.b086e8f2b4", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_stg_sales_retail_org__location__saleid"], "alias": "dbt_utils_unique_combination_o_c1463cfb31159314e7e1b9b7e495d77e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c1463cfb31159314e7e1b9b7e495d77e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c1463cfb31159314e7e1b9b7e495d77e"}, "created_at": 1686068134.0930967, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c1463cfb31159314e7e1b9b7e495d77e\") }}", "language": "sql", "refs": [["stg_sales_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_sales_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_sales_retail"}, "test.bt_21_real_time.table_is_empty_stg_sales_retail_.27dda28ce1": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_sales_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_sales_retail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_sales_retail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_sales_retail_.27dda28ce1", "fqn": ["bt_21_real_time", "table_is_empty_stg_sales_retail_"], "alias": "table_is_empty_stg_sales_retail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.098535, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sales_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_sales_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_sales_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_sales_retail_day__extract_date__1.b63e65ef66": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_sales_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_sales_retail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_sales_retail_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_sales_retail_day__extract_date__1.b63e65ef66", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_sales_retail_day__extract_date__1"], "alias": "dbt_utils_recency_stg_sales_retail_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.1023085, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sales_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_sales_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_sales_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_sales_retail_day__datetime_timestamp__1.e6fcad5cf7": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "datetime_timestamp", "interval": 1, "model": "{{ get_where_subquery(ref('stg_sales_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_sales_retail_day__datetime_timestamp__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_sales_retail_day__datetime_timestamp__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_sales_retail_day__datetime_timestamp__1.e6fcad5cf7", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_sales_retail_day__datetime_timestamp__1"], "alias": "dbt_utils_recency_stg_sales_retail_day__datetime_timestamp__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.107167, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sales_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_sales_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_sales_retail"}, "test.bt_21_real_time.not_null_stg_taxcategories_retail_id.b37d1053e2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_taxcategories_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_taxcategories_retail_id", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_taxcategories_retail_id.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_taxcategories_retail_id.b37d1053e2", "fqn": ["bt_21_real_time", "not_null_stg_taxcategories_retail_id"], "alias": "not_null_stg_taxcategories_retail_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.1119628, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_taxcategories_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "id", "file_key_name": "models.stg_taxcategories_retail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_taxcategories_retail_org__id.71d77f46b2": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["org", "id"], "model": "{{ get_where_subquery(ref('stg_taxcategories_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_taxcategories_retail_org__id", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_d00377f519649264d967749b5e034dc3.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_taxcategories_retail_org__id.71d77f46b2", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_stg_taxcategories_retail_org__id"], "alias": "dbt_utils_unique_combination_o_d00377f519649264d967749b5e034dc3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_d00377f519649264d967749b5e034dc3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_d00377f519649264d967749b5e034dc3"}, "created_at": 1686068134.1138752, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d00377f519649264d967749b5e034dc3\") }}", "language": "sql", "refs": [["stg_taxcategories_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_taxcategories_retail"}, "test.bt_21_real_time.table_is_empty_stg_taxcategories_retail_.a89ef8e918": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_taxcategories_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_taxcategories_retail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_taxcategories_retail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_taxcategories_retail_.a89ef8e918", "fqn": ["bt_21_real_time", "table_is_empty_stg_taxcategories_retail_"], "alias": "table_is_empty_stg_taxcategories_retail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.118956, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_taxcategories_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_taxcategories_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_taxcategories_retail_day__extract_date__1.b9c62ef088": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_taxcategories_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_taxcategories_retail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_taxcategories_retail_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_taxcategories_retail_day__extract_date__1.b9c62ef088", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_taxcategories_retail_day__extract_date__1"], "alias": "dbt_utils_recency_stg_taxcategories_retail_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.1227362, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_taxcategories_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_taxcategories_retail"}, "test.bt_21_real_time.not_null_stg_tickets_retail_ticketid.7bd0c2aa19": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ticketid", "model": "{{ get_where_subquery(ref('stg_tickets_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_tickets_retail_ticketid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_tickets_retail_ticketid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_tickets_retail_ticketid.7bd0c2aa19", "fqn": ["bt_21_real_time", "not_null_stg_tickets_retail_ticketid"], "alias": "not_null_stg_tickets_retail_ticketid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.1275532, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_tickets_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bt_21_real_time.stg_tickets_retail"]}, "compiled_path": null, "column_name": "ticketid", "file_key_name": "models.stg_tickets_retail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_tickets_retail_org__location__ticketid.d8c7e5341c": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["org", "location", "ticketid"], "model": "{{ get_where_subquery(ref('stg_tickets_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_tickets_retail_org__location__ticketid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_e1d03a0ff6308bbf0caae0a694b7eea3.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_tickets_retail_org__location__ticketid.d8c7e5341c", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_stg_tickets_retail_org__location__ticketid"], "alias": "dbt_utils_unique_combination_o_e1d03a0ff6308bbf0caae0a694b7eea3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e1d03a0ff6308bbf0caae0a694b7eea3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e1d03a0ff6308bbf0caae0a694b7eea3"}, "created_at": 1686068134.129368, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e1d03a0ff6308bbf0caae0a694b7eea3\") }}", "language": "sql", "refs": [["stg_tickets_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_tickets_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_tickets_retail"}, "test.bt_21_real_time.table_is_empty_stg_tickets_retail_.928947c9f7": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_tickets_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_tickets_retail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_tickets_retail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_tickets_retail_.928947c9f7", "fqn": ["bt_21_real_time", "table_is_empty_stg_tickets_retail_"], "alias": "table_is_empty_stg_tickets_retail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.1348572, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_tickets_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_tickets_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_tickets_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_tickets_retail_day__extract_date__1.8d4059b82b": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_tickets_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_tickets_retail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_tickets_retail_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_tickets_retail_day__extract_date__1.8d4059b82b", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_tickets_retail_day__extract_date__1"], "alias": "dbt_utils_recency_stg_tickets_retail_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.1387124, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_tickets_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_tickets_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_tickets_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_tickets_retail_day__datetime_timestamp__1.50d1b8dbf3": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "datetime_timestamp", "interval": 1, "model": "{{ get_where_subquery(ref('stg_tickets_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_tickets_retail_day__datetime_timestamp__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_tickets_retail_day__datetime_timestamp__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_tickets_retail_day__datetime_timestamp__1.50d1b8dbf3", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_tickets_retail_day__datetime_timestamp__1"], "alias": "dbt_utils_recency_stg_tickets_retail_day__datetime_timestamp__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.1434894, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_tickets_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_tickets_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_tickets_retail"}, "test.bt_21_real_time.not_null_stg_vendors_retail_vendorid.f5ce535da5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "vendorid", "model": "{{ get_where_subquery(ref('stg_vendors_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_vendors_retail_vendorid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_vendors_retail_vendorid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_vendors_retail_vendorid.f5ce535da5", "fqn": ["bt_21_real_time", "not_null_stg_vendors_retail_vendorid"], "alias": "not_null_stg_vendors_retail_vendorid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.148333, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_vendors_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bt_21_real_time.stg_vendors_retail"]}, "compiled_path": null, "column_name": "vendorid", "file_key_name": "models.stg_vendors_retail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_vendors_retail_org__vendorid.d955ded1d3": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["org", "vendorid"], "model": "{{ get_where_subquery(ref('stg_vendors_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_vendors_retail_org__vendorid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_2436265f3c26ef0d801a1f7031feb8af.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_vendors_retail_org__vendorid.d955ded1d3", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_stg_vendors_retail_org__vendorid"], "alias": "dbt_utils_unique_combination_o_2436265f3c26ef0d801a1f7031feb8af", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2436265f3c26ef0d801a1f7031feb8af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_2436265f3c26ef0d801a1f7031feb8af"}, "created_at": 1686068134.1501884, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2436265f3c26ef0d801a1f7031feb8af\") }}", "language": "sql", "refs": [["stg_vendors_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_vendors_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_vendors_retail"}, "test.bt_21_real_time.table_is_empty_stg_vendors_retail_.b73365198a": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_vendors_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_vendors_retail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_vendors_retail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_vendors_retail_.b73365198a", "fqn": ["bt_21_real_time", "table_is_empty_stg_vendors_retail_"], "alias": "table_is_empty_stg_vendors_retail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.1553044, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_vendors_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_vendors_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_vendors_retail"}, "test.bt_21_real_time.dbt_utils_recency_stg_vendors_retail_day__extract_date__1.2efc2f2964": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_vendors_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_vendors_retail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_vendors_retail_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_vendors_retail_day__extract_date__1.2efc2f2964", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_vendors_retail_day__extract_date__1"], "alias": "dbt_utils_recency_stg_vendors_retail_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.1591332, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_vendors_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.stg_vendors_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_vendors_retail"}, "test.bt_21_real_time.not_null_stg_customers_trace_customerid.ad58f59388": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customerid", "model": "{{ get_where_subquery(ref('stg_customers_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_customers_trace_customerid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_customers_trace_customerid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_customers_trace_customerid.ad58f59388", "fqn": ["bt_21_real_time", "not_null_stg_customers_trace_customerid"], "alias": "not_null_stg_customers_trace_customerid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.163938, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_customers_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "customerid", "file_key_name": "models.stg_customers_trace"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_customers_trace_location__customerid.425f226e05": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["location", "customerid"], "model": "{{ get_where_subquery(ref('stg_customers_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_customers_trace_location__customerid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_40f6c2ab2bd76f0d779221dba74a0871.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_customers_trace_location__customerid.425f226e05", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_stg_customers_trace_location__customerid"], "alias": "dbt_utils_unique_combination_o_40f6c2ab2bd76f0d779221dba74a0871", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_40f6c2ab2bd76f0d779221dba74a0871", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_40f6c2ab2bd76f0d779221dba74a0871"}, "created_at": 1686068134.165761, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_40f6c2ab2bd76f0d779221dba74a0871\") }}", "language": "sql", "refs": [["stg_customers_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_customers_trace"}, "test.bt_21_real_time.table_is_empty_stg_customers_trace_.de2e65e7cd": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_customers_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_customers_trace_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_customers_trace_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_customers_trace_.de2e65e7cd", "fqn": ["bt_21_real_time", "table_is_empty_stg_customers_trace_"], "alias": "table_is_empty_stg_customers_trace_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.1714194, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_customers_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_customers_trace"}, "test.bt_21_real_time.dbt_utils_recency_stg_customers_trace_day__extract_date__1.a309df89ff": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_customers_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_customers_trace_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_customers_trace_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_customers_trace_day__extract_date__1.a309df89ff", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_customers_trace_day__extract_date__1"], "alias": "dbt_utils_recency_stg_customers_trace_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.1754794, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_customers_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_customers_trace"}, "test.bt_21_real_time.dbt_utils_recency_stg_customers_trace_day__created__1.79677c88ba": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "created", "interval": 1, "model": "{{ get_where_subquery(ref('stg_customers_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_customers_trace_day__created__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_customers_trace_day__created__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_customers_trace_day__created__1.79677c88ba", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_customers_trace_day__created__1"], "alias": "dbt_utils_recency_stg_customers_trace_day__created__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.1799862, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_customers_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_customers_trace"}, "test.bt_21_real_time.not_null_stg_inventory_trace_id.4e6d17da99": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_inventory_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_inventory_trace_id", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_inventory_trace_id.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_inventory_trace_id.4e6d17da99", "fqn": ["bt_21_real_time", "not_null_stg_inventory_trace_id"], "alias": "not_null_stg_inventory_trace_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.1847987, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventory_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "id", "file_key_name": "models.stg_inventory_trace"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventory_trace_location__id__productid.e9b7d26047": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["location", "id", "productid"], "model": "{{ get_where_subquery(ref('stg_inventory_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_inventory_trace_location__id__productid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_b85e06d0e9c98b682bcded04769c6ec1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventory_trace_location__id__productid.e9b7d26047", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_stg_inventory_trace_location__id__productid"], "alias": "dbt_utils_unique_combination_o_b85e06d0e9c98b682bcded04769c6ec1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_b85e06d0e9c98b682bcded04769c6ec1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b85e06d0e9c98b682bcded04769c6ec1"}, "created_at": 1686068134.1866524, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b85e06d0e9c98b682bcded04769c6ec1\") }}", "language": "sql", "refs": [["stg_inventory_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventory_trace"}, "test.bt_21_real_time.table_is_empty_stg_inventory_trace_.7a170e09c3": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_inventory_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_inventory_trace_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_inventory_trace_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_inventory_trace_.7a170e09c3", "fqn": ["bt_21_real_time", "table_is_empty_stg_inventory_trace_"], "alias": "table_is_empty_stg_inventory_trace_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.192063, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventory_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventory_trace"}, "test.bt_21_real_time.dbt_utils_recency_stg_inventory_trace_day__extract_date__1.263c484ea8": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_inventory_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_inventory_trace_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_inventory_trace_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_inventory_trace_day__extract_date__1.263c484ea8", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_inventory_trace_day__extract_date__1"], "alias": "dbt_utils_recency_stg_inventory_trace_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.1958666, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventory_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventory_trace"}, "test.bt_21_real_time.dbt_utils_recency_stg_inventory_trace_day__sessiontime_timestamp__1.23351f2e08": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "sessiontime_timestamp", "interval": 1, "model": "{{ get_where_subquery(ref('stg_inventory_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_inventory_trace_day__sessiontime_timestamp__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_inventor_fc5e9ca158caecb9a8b26454e7c8d648.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_inventory_trace_day__sessiontime_timestamp__1.23351f2e08", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_inventory_trace_day__sessiontime_timestamp__1"], "alias": "dbt_utils_recency_stg_inventor_fc5e9ca158caecb9a8b26454e7c8d648", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_recency_stg_inventor_fc5e9ca158caecb9a8b26454e7c8d648", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_recency_stg_inventor_fc5e9ca158caecb9a8b26454e7c8d648"}, "created_at": 1686068134.20069, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_recency_stg_inventor_fc5e9ca158caecb9a8b26454e7c8d648\") }}", "language": "sql", "refs": [["stg_inventory_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventory_trace"}, "test.bt_21_real_time.not_null_stg_inventorylog_trace_id.c24cae614d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_inventorylog_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_inventorylog_trace_id", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_inventorylog_trace_id.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_inventorylog_trace_id.c24cae614d", "fqn": ["bt_21_real_time", "not_null_stg_inventorylog_trace_id"], "alias": "not_null_stg_inventorylog_trace_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.205773, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventorylog_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "id", "file_key_name": "models.stg_inventorylog_trace"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventorylog_trace_location__id.9b2ae5962c": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["location", "id"], "model": "{{ get_where_subquery(ref('stg_inventorylog_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_inventorylog_trace_location__id", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_dd29ad519f32b4edb5b507ef162e3e80.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventorylog_trace_location__id.9b2ae5962c", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_stg_inventorylog_trace_location__id"], "alias": "dbt_utils_unique_combination_o_dd29ad519f32b4edb5b507ef162e3e80", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_dd29ad519f32b4edb5b507ef162e3e80", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_dd29ad519f32b4edb5b507ef162e3e80"}, "created_at": 1686068134.2075984, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_dd29ad519f32b4edb5b507ef162e3e80\") }}", "language": "sql", "refs": [["stg_inventorylog_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventorylog_trace"}, "test.bt_21_real_time.table_is_empty_stg_inventorylog_trace_.d09e4f04cd": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_inventorylog_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_inventorylog_trace_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_inventorylog_trace_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_inventorylog_trace_.d09e4f04cd", "fqn": ["bt_21_real_time", "table_is_empty_stg_inventorylog_trace_"], "alias": "table_is_empty_stg_inventorylog_trace_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.2126873, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventorylog_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventorylog_trace"}, "test.bt_21_real_time.dbt_utils_recency_stg_inventorylog_trace_day__extract_date__1.e5e7d3cf71": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_inventorylog_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_inventorylog_trace_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_inventorylog_trace_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_inventorylog_trace_day__extract_date__1.e5e7d3cf71", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_inventorylog_trace_day__extract_date__1"], "alias": "dbt_utils_recency_stg_inventorylog_trace_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.2165768, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventorylog_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventorylog_trace"}, "test.bt_21_real_time.dbt_utils_recency_stg_inventorylog_trace_day__sessiontime_timestamp__1.4f3e15d4b6": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "sessiontime_timestamp", "interval": 1, "model": "{{ get_where_subquery(ref('stg_inventorylog_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_inventorylog_trace_day__sessiontime_timestamp__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_inventor_1e2a725e5615150a64b8212f2938cd87.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_inventorylog_trace_day__sessiontime_timestamp__1.4f3e15d4b6", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_inventorylog_trace_day__sessiontime_timestamp__1"], "alias": "dbt_utils_recency_stg_inventor_1e2a725e5615150a64b8212f2938cd87", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_recency_stg_inventor_1e2a725e5615150a64b8212f2938cd87", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_recency_stg_inventor_1e2a725e5615150a64b8212f2938cd87"}, "created_at": 1686068134.2215884, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_recency_stg_inventor_1e2a725e5615150a64b8212f2938cd87\") }}", "language": "sql", "refs": [["stg_inventorylog_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventorylog_trace"}, "test.bt_21_real_time.not_null_stg_inventorytypes_trace_id.25b47e5150": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_inventorytypes_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_inventorytypes_trace_id", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_inventorytypes_trace_id.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_inventorytypes_trace_id.25b47e5150", "fqn": ["bt_21_real_time", "not_null_stg_inventorytypes_trace_id"], "alias": "not_null_stg_inventorytypes_trace_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.2266889, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventorytypes_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "id", "file_key_name": "models.stg_inventorytypes_trace"}, "test.bt_21_real_time.unique_stg_inventorytypes_trace_id.c8a3c00687": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('stg_inventorytypes_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "unique_stg_inventorytypes_trace_id", "resource_type": "test", "package_name": "bt_21_real_time", "path": "unique_stg_inventorytypes_trace_id.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.unique_stg_inventorytypes_trace_id.c8a3c00687", "fqn": ["bt_21_real_time", "unique_stg_inventorytypes_trace_id"], "alias": "unique_stg_inventorytypes_trace_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.2284968, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventorytypes_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "column_name": "id", "file_key_name": "models.stg_inventorytypes_trace"}, "test.bt_21_real_time.table_is_empty_stg_inventorytypes_trace_.5b07f1eeaa": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_inventorytypes_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_inventorytypes_trace_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_inventorytypes_trace_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_inventorytypes_trace_.5b07f1eeaa", "fqn": ["bt_21_real_time", "table_is_empty_stg_inventorytypes_trace_"], "alias": "table_is_empty_stg_inventorytypes_trace_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.230371, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventorytypes_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventorytypes_trace"}, "test.bt_21_real_time.dbt_utils_recency_stg_inventorytypes_trace_day__extract_date__1.789ef1fd0c": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_inventorytypes_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_inventorytypes_trace_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_inventorytypes_trace_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_inventorytypes_trace_day__extract_date__1.789ef1fd0c", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_inventorytypes_trace_day__extract_date__1"], "alias": "dbt_utils_recency_stg_inventorytypes_trace_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.2344892, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_inventorytypes_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_inventorytypes_trace"}, "test.bt_21_real_time.not_null_stg_locations_trace_location.b4a594d766": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "location", "model": "{{ get_where_subquery(ref('stg_locations_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_locations_trace_location", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_locations_trace_location.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_locations_trace_location.b4a594d766", "fqn": ["bt_21_real_time", "not_null_stg_locations_trace_location"], "alias": "not_null_stg_locations_trace_location", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.2390556, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_locations_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "location", "file_key_name": "models.stg_locations_trace"}, "test.bt_21_real_time.unique_stg_locations_trace_location.a5ee270223": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "location", "model": "{{ get_where_subquery(ref('stg_locations_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "unique_stg_locations_trace_location", "resource_type": "test", "package_name": "bt_21_real_time", "path": "unique_stg_locations_trace_location.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.unique_stg_locations_trace_location.a5ee270223", "fqn": ["bt_21_real_time", "unique_stg_locations_trace_location"], "alias": "unique_stg_locations_trace_location", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.2411165, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_locations_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "column_name": "location", "file_key_name": "models.stg_locations_trace"}, "test.bt_21_real_time.table_is_empty_stg_locations_trace_.64edbb7401": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_locations_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_locations_trace_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_locations_trace_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_locations_trace_.64edbb7401", "fqn": ["bt_21_real_time", "table_is_empty_stg_locations_trace_"], "alias": "table_is_empty_stg_locations_trace_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.2429335, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_locations_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_locations_trace"}, "test.bt_21_real_time.dbt_utils_recency_stg_locations_trace_day__extract_date__1.ec3bc61dfd": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_locations_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_locations_trace_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_locations_trace_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_locations_trace_day__extract_date__1.ec3bc61dfd", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_locations_trace_day__extract_date__1"], "alias": "dbt_utils_recency_stg_locations_trace_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.2467418, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_locations_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_locations_trace"}, "test.bt_21_real_time.not_null_stg_refunds_trace_transactionid_original.1740459e22": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "transactionid_original", "model": "{{ get_where_subquery(ref('stg_refunds_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_refunds_trace_transactionid_original", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_refunds_trace_transactionid_original.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_refunds_trace_transactionid_original.1740459e22", "fqn": ["bt_21_real_time", "not_null_stg_refunds_trace_transactionid_original"], "alias": "not_null_stg_refunds_trace_transactionid_original", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.2515392, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_refunds_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "transactionid_original", "file_key_name": "models.stg_refunds_trace"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_refunds_trace_location__transactionid_original.d6b7c7409e": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["location", "transactionid_original"], "model": "{{ get_where_subquery(ref('stg_refunds_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_refunds_trace_location__transactionid_original", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_4853e9664d26681f4a154b2f7eaec2cb.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_refunds_trace_location__transactionid_original.d6b7c7409e", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_stg_refunds_trace_location__transactionid_original"], "alias": "dbt_utils_unique_combination_o_4853e9664d26681f4a154b2f7eaec2cb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_4853e9664d26681f4a154b2f7eaec2cb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4853e9664d26681f4a154b2f7eaec2cb"}, "created_at": 1686068134.2533329, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4853e9664d26681f4a154b2f7eaec2cb\") }}", "language": "sql", "refs": [["stg_refunds_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_refunds_trace"}, "test.bt_21_real_time.table_is_empty_stg_refunds_trace_.f47184009e": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_refunds_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_refunds_trace_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_refunds_trace_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_refunds_trace_.f47184009e", "fqn": ["bt_21_real_time", "table_is_empty_stg_refunds_trace_"], "alias": "table_is_empty_stg_refunds_trace_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.2588007, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_refunds_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_refunds_trace"}, "test.bt_21_real_time.dbt_utils_recency_stg_refunds_trace_day__extract_date__1.a76ff53791": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_refunds_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_refunds_trace_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_refunds_trace_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_refunds_trace_day__extract_date__1.a76ff53791", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_refunds_trace_day__extract_date__1"], "alias": "dbt_utils_recency_stg_refunds_trace_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.2628362, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_refunds_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_refunds_trace"}, "test.bt_21_real_time.not_null_stg_sales_trace_saleid.da28768a91": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "saleid", "model": "{{ get_where_subquery(ref('stg_sales_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_stg_sales_trace_saleid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_stg_sales_trace_saleid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_stg_sales_trace_saleid.da28768a91", "fqn": ["bt_21_real_time", "not_null_stg_sales_trace_saleid"], "alias": "not_null_stg_sales_trace_saleid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.2673957, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sales_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "saleid", "file_key_name": "models.stg_sales_trace"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_sales_trace_location__saleid.9616ef181a": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["location", "saleid"], "model": "{{ get_where_subquery(ref('stg_sales_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_sales_trace_location__saleid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_48d56737ec88e7f4f8f69de68374e933.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_sales_trace_location__saleid.9616ef181a", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_stg_sales_trace_location__saleid"], "alias": "dbt_utils_unique_combination_o_48d56737ec88e7f4f8f69de68374e933", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_48d56737ec88e7f4f8f69de68374e933", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_48d56737ec88e7f4f8f69de68374e933"}, "created_at": 1686068134.2695549, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_48d56737ec88e7f4f8f69de68374e933\") }}", "language": "sql", "refs": [["stg_sales_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_sales_trace"}, "test.bt_21_real_time.table_is_empty_stg_sales_trace_.9532c1f574": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('stg_sales_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_stg_sales_trace_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_stg_sales_trace_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_stg_sales_trace_.9532c1f574", "fqn": ["bt_21_real_time", "table_is_empty_stg_sales_trace_"], "alias": "table_is_empty_stg_sales_trace_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.2744055, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sales_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_sales_trace"}, "test.bt_21_real_time.dbt_utils_recency_stg_sales_trace_day__extract_date__1.cebabdf998": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('stg_sales_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_sales_trace_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_sales_trace_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_sales_trace_day__extract_date__1.cebabdf998", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_sales_trace_day__extract_date__1"], "alias": "dbt_utils_recency_stg_sales_trace_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.2784214, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sales_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_sales_trace"}, "test.bt_21_real_time.dbt_utils_recency_stg_sales_trace_day__sessiontime_timestamp__1.0b3cacf91f": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "sessiontime_timestamp", "interval": 1, "model": "{{ get_where_subquery(ref('stg_sales_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_stg_sales_trace_day__sessiontime_timestamp__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_stg_sales_trace_day__sessiontime_timestamp__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_stg_sales_trace_day__sessiontime_timestamp__1.0b3cacf91f", "fqn": ["bt_21_real_time", "dbt_utils_recency_stg_sales_trace_day__sessiontime_timestamp__1"], "alias": "dbt_utils_recency_stg_sales_trace_day__sessiontime_timestamp__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.2832534, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_sales_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.stg_sales_trace"}, "test.bt_21_real_time.not_null_int_dispensary_retail_org.edfac1204e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "org", "model": "{{ get_where_subquery(ref('int_dispensary_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_int_dispensary_retail_org", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_int_dispensary_retail_org.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_int_dispensary_retail_org.edfac1204e", "fqn": ["bt_21_real_time", "not_null_int_dispensary_retail_org"], "alias": "not_null_int_dispensary_retail_org", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.287827, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_dispensary_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bt_21_real_time.int_dispensary_retail"]}, "compiled_path": null, "column_name": "org", "file_key_name": "models.int_dispensary_retail"}, "test.bt_21_real_time.not_null_int_dispensary_retail_location.6ec4b98561": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "location", "model": "{{ get_where_subquery(ref('int_dispensary_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_int_dispensary_retail_location", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_int_dispensary_retail_location.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_int_dispensary_retail_location.6ec4b98561", "fqn": ["bt_21_real_time", "not_null_int_dispensary_retail_location"], "alias": "not_null_int_dispensary_retail_location", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.289655, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_dispensary_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bt_21_real_time.int_dispensary_retail"]}, "compiled_path": null, "column_name": "location", "file_key_name": "models.int_dispensary_retail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_dispensary_retail_org__location.fa1b7a4c7f": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["org", "location"], "model": "{{ get_where_subquery(ref('int_dispensary_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_dispensary_retail_org__location", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_375aaa720901f05c7425ac9cc12fe887.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_dispensary_retail_org__location.fa1b7a4c7f", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_int_dispensary_retail_org__location"], "alias": "dbt_utils_unique_combination_o_375aaa720901f05c7425ac9cc12fe887", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_375aaa720901f05c7425ac9cc12fe887", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_375aaa720901f05c7425ac9cc12fe887"}, "created_at": 1686068134.291753, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_375aaa720901f05c7425ac9cc12fe887\") }}", "language": "sql", "refs": [["int_dispensary_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.int_dispensary_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_dispensary_retail"}, "test.bt_21_real_time.table_is_empty_int_dispensary_retail_.6b350fd05c": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('int_dispensary_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_int_dispensary_retail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_int_dispensary_retail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_int_dispensary_retail_.6b350fd05c", "fqn": ["bt_21_real_time", "table_is_empty_int_dispensary_retail_"], "alias": "table_is_empty_int_dispensary_retail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.2965276, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_dispensary_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.int_dispensary_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_dispensary_retail"}, "test.bt_21_real_time.dbt_utils_recency_int_dispensary_retail_day__extract_date__1.61bd0e844d": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('int_dispensary_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_int_dispensary_retail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_int_dispensary_retail_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_int_dispensary_retail_day__extract_date__1.61bd0e844d", "fqn": ["bt_21_real_time", "dbt_utils_recency_int_dispensary_retail_day__extract_date__1"], "alias": "dbt_utils_recency_int_dispensary_retail_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.300551, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_dispensary_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.int_dispensary_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_dispensary_retail"}, "test.bt_21_real_time.not_null_int_inventory_retail_inventoryid.4a68ec3f34": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "inventoryid", "model": "{{ get_where_subquery(ref('int_inventory_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_int_inventory_retail_inventoryid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_int_inventory_retail_inventoryid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_int_inventory_retail_inventoryid.4a68ec3f34", "fqn": ["bt_21_real_time", "not_null_int_inventory_retail_inventoryid"], "alias": "not_null_int_inventory_retail_inventoryid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.3053339, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_inventory_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "inventoryid", "file_key_name": "models.int_inventory_retail"}, "test.bt_21_real_time.not_null_int_inventory_retail_productid.2f0ede2d15": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "productid", "model": "{{ get_where_subquery(ref('int_inventory_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_int_inventory_retail_productid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_int_inventory_retail_productid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_int_inventory_retail_productid.2f0ede2d15", "fqn": ["bt_21_real_time", "not_null_int_inventory_retail_productid"], "alias": "not_null_int_inventory_retail_productid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.3071716, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_inventory_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "productid", "file_key_name": "models.int_inventory_retail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_inventory_retail_org__inventoryid__productid.89fe89e73f": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["org", "inventoryid", "productid"], "model": "{{ get_where_subquery(ref('int_inventory_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_inventory_retail_org__inventoryid__productid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_0c4c6b8319b2c58e8110b333905be6d5.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_inventory_retail_org__inventoryid__productid.89fe89e73f", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_int_inventory_retail_org__inventoryid__productid"], "alias": "dbt_utils_unique_combination_o_0c4c6b8319b2c58e8110b333905be6d5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_0c4c6b8319b2c58e8110b333905be6d5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0c4c6b8319b2c58e8110b333905be6d5"}, "created_at": 1686068134.3089774, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0c4c6b8319b2c58e8110b333905be6d5\") }}", "language": "sql", "refs": [["int_inventory_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_inventory_retail"}, "test.bt_21_real_time.table_is_empty_int_inventory_retail_.c137b3c6c3": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('int_inventory_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_int_inventory_retail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_int_inventory_retail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_int_inventory_retail_.c137b3c6c3", "fqn": ["bt_21_real_time", "table_is_empty_int_inventory_retail_"], "alias": "table_is_empty_int_inventory_retail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.3144848, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_inventory_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_inventory_retail"}, "test.bt_21_real_time.dbt_utils_recency_int_inventory_retail_day__extract_date__1.3746bd1b68": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('int_inventory_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_int_inventory_retail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_int_inventory_retail_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_int_inventory_retail_day__extract_date__1.3746bd1b68", "fqn": ["bt_21_real_time", "dbt_utils_recency_int_inventory_retail_day__extract_date__1"], "alias": "dbt_utils_recency_int_inventory_retail_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.3182604, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_inventory_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_inventory_retail"}, "test.bt_21_real_time.dbt_utils_recency_int_inventory_retail_day__sessiontime_timestamp__1.68ed70a06f": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "sessiontime_timestamp", "interval": 1, "model": "{{ get_where_subquery(ref('int_inventory_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_int_inventory_retail_day__sessiontime_timestamp__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_int_inventor_e1411b0a6a793ac13e7363f6b936c913.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_int_inventory_retail_day__sessiontime_timestamp__1.68ed70a06f", "fqn": ["bt_21_real_time", "dbt_utils_recency_int_inventory_retail_day__sessiontime_timestamp__1"], "alias": "dbt_utils_recency_int_inventor_e1411b0a6a793ac13e7363f6b936c913", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_recency_int_inventor_e1411b0a6a793ac13e7363f6b936c913", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_recency_int_inventor_e1411b0a6a793ac13e7363f6b936c913"}, "created_at": 1686068134.3230996, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_recency_int_inventor_e1411b0a6a793ac13e7363f6b936c913\") }}", "language": "sql", "refs": [["int_inventory_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_inventory_retail"}, "test.bt_21_real_time.not_null_int_product_inventory_retail_inventoryid.453555db4a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "inventoryid", "model": "{{ get_where_subquery(ref('int_product_inventory_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_int_product_inventory_retail_inventoryid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_int_product_inventory_retail_inventoryid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_int_product_inventory_retail_inventoryid.453555db4a", "fqn": ["bt_21_real_time", "not_null_int_product_inventory_retail_inventoryid"], "alias": "not_null_int_product_inventory_retail_inventoryid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.3281372, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_product_inventory_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "inventoryid", "file_key_name": "models.int_product_inventory_retail"}, "test.bt_21_real_time.not_null_int_product_inventory_retail_productid.6c97ca0f64": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "productid", "model": "{{ get_where_subquery(ref('int_product_inventory_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_int_product_inventory_retail_productid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_int_product_inventory_retail_productid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_int_product_inventory_retail_productid.6c97ca0f64", "fqn": ["bt_21_real_time", "not_null_int_product_inventory_retail_productid"], "alias": "not_null_int_product_inventory_retail_productid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.3299546, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_product_inventory_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "productid", "file_key_name": "models.int_product_inventory_retail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_product_inventory_retail_org__inventoryid__productid.1a575e0044": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["org", "inventoryid", "productid"], "model": "{{ get_where_subquery(ref('int_product_inventory_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_product_inventory_retail_org__inventoryid__productid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_83a4b10e64fb7b1374b04114f2b4a2fd.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_product_inventory_retail_org__inventoryid__productid.1a575e0044", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_int_product_inventory_retail_org__inventoryid__productid"], "alias": "dbt_utils_unique_combination_o_83a4b10e64fb7b1374b04114f2b4a2fd", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_83a4b10e64fb7b1374b04114f2b4a2fd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_83a4b10e64fb7b1374b04114f2b4a2fd"}, "created_at": 1686068134.3318326, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_83a4b10e64fb7b1374b04114f2b4a2fd\") }}", "language": "sql", "refs": [["int_product_inventory_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_product_inventory_retail"}, "test.bt_21_real_time.table_is_empty_int_product_inventory_retail_.3101b8cd73": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('int_product_inventory_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_int_product_inventory_retail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_int_product_inventory_retail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_int_product_inventory_retail_.3101b8cd73", "fqn": ["bt_21_real_time", "table_is_empty_int_product_inventory_retail_"], "alias": "table_is_empty_int_product_inventory_retail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.3372898, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_product_inventory_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_product_inventory_retail"}, "test.bt_21_real_time.dbt_utils_recency_int_product_inventory_retail_day__extract_date__1.e65206ce33": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('int_product_inventory_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_int_product_inventory_retail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_int_product__4051fd50bc3f1d3836b7d753a5d4ac47.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_int_product_inventory_retail_day__extract_date__1.e65206ce33", "fqn": ["bt_21_real_time", "dbt_utils_recency_int_product_inventory_retail_day__extract_date__1"], "alias": "dbt_utils_recency_int_product__4051fd50bc3f1d3836b7d753a5d4ac47", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_recency_int_product__4051fd50bc3f1d3836b7d753a5d4ac47", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_recency_int_product__4051fd50bc3f1d3836b7d753a5d4ac47"}, "created_at": 1686068134.3417873, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_recency_int_product__4051fd50bc3f1d3836b7d753a5d4ac47\") }}", "language": "sql", "refs": [["int_product_inventory_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_product_inventory_retail"}, "test.bt_21_real_time.dbt_utils_recency_int_product_inventory_retail_day__sessiontime_timestamp__1.798d7d0e8c": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "sessiontime_timestamp", "interval": 1, "model": "{{ get_where_subquery(ref('int_product_inventory_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_int_product_inventory_retail_day__sessiontime_timestamp__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_int_product__8625b852534b61e8179291b2721e506f.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_int_product_inventory_retail_day__sessiontime_timestamp__1.798d7d0e8c", "fqn": ["bt_21_real_time", "dbt_utils_recency_int_product_inventory_retail_day__sessiontime_timestamp__1"], "alias": "dbt_utils_recency_int_product__8625b852534b61e8179291b2721e506f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_recency_int_product__8625b852534b61e8179291b2721e506f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_recency_int_product__8625b852534b61e8179291b2721e506f"}, "created_at": 1686068134.3465936, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_recency_int_product__8625b852534b61e8179291b2721e506f\") }}", "language": "sql", "refs": [["int_product_inventory_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_product_inventory_retail"}, "test.bt_21_real_time.not_null_int_products_retail_productid.bd99edf342": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "productid", "model": "{{ get_where_subquery(ref('int_products_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_int_products_retail_productid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_int_products_retail_productid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_int_products_retail_productid.bd99edf342", "fqn": ["bt_21_real_time", "not_null_int_products_retail_productid"], "alias": "not_null_int_products_retail_productid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.3515718, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_products_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bt_21_real_time.int_products_retail"]}, "compiled_path": null, "column_name": "productid", "file_key_name": "models.int_products_retail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_products_retail_org__location__productid.ea86d6d926": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["org", "location", "productid"], "model": "{{ get_where_subquery(ref('int_products_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_products_retail_org__location__productid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_7eed5e919cb6919d55acdb7c3dacf667.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_products_retail_org__location__productid.ea86d6d926", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_int_products_retail_org__location__productid"], "alias": "dbt_utils_unique_combination_o_7eed5e919cb6919d55acdb7c3dacf667", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7eed5e919cb6919d55acdb7c3dacf667", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7eed5e919cb6919d55acdb7c3dacf667"}, "created_at": 1686068134.353374, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7eed5e919cb6919d55acdb7c3dacf667\") }}", "language": "sql", "refs": [["int_products_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.int_products_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_products_retail"}, "test.bt_21_real_time.table_is_empty_int_products_retail_.cb341b615a": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('int_products_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_int_products_retail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_int_products_retail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_int_products_retail_.cb341b615a", "fqn": ["bt_21_real_time", "table_is_empty_int_products_retail_"], "alias": "table_is_empty_int_products_retail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.3588135, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_products_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.int_products_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_products_retail"}, "test.bt_21_real_time.dbt_utils_recency_int_products_retail_day__extract_date__1.f1087aa076": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('int_products_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_int_products_retail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_int_products_retail_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_int_products_retail_day__extract_date__1.f1087aa076", "fqn": ["bt_21_real_time", "dbt_utils_recency_int_products_retail_day__extract_date__1"], "alias": "dbt_utils_recency_int_products_retail_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.3626044, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_products_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.int_products_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_products_retail"}, "test.bt_21_real_time.dbt_utils_recency_int_products_retail_day__created__1.478abb364d": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "created", "interval": 1, "model": "{{ get_where_subquery(ref('int_products_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_int_products_retail_day__created__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_int_products_retail_day__created__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_int_products_retail_day__created__1.478abb364d", "fqn": ["bt_21_real_time", "dbt_utils_recency_int_products_retail_day__created__1"], "alias": "dbt_utils_recency_int_products_retail_day__created__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.3674135, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_products_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.int_products_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_products_retail"}, "test.bt_21_real_time.not_null_int_sales_retail_saleid.7f2a3ca838": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "saleid", "model": "{{ get_where_subquery(ref('int_sales_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_int_sales_retail_saleid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_int_sales_retail_saleid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_int_sales_retail_saleid.7f2a3ca838", "fqn": ["bt_21_real_time", "not_null_int_sales_retail_saleid"], "alias": "not_null_int_sales_retail_saleid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.372214, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_sales_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bt_21_real_time.int_sales_retail"]}, "compiled_path": null, "column_name": "saleid", "file_key_name": "models.int_sales_retail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_sales_retail_org__location__saleid.041f8a4648": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["org", "location", "saleid"], "model": "{{ get_where_subquery(ref('int_sales_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_sales_retail_org__location__saleid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_b3f2d557af591e81771e1c2d79e16a36.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_sales_retail_org__location__saleid.041f8a4648", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_int_sales_retail_org__location__saleid"], "alias": "dbt_utils_unique_combination_o_b3f2d557af591e81771e1c2d79e16a36", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b3f2d557af591e81771e1c2d79e16a36", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b3f2d557af591e81771e1c2d79e16a36"}, "created_at": 1686068134.3740633, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b3f2d557af591e81771e1c2d79e16a36\") }}", "language": "sql", "refs": [["int_sales_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.int_sales_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_sales_retail"}, "test.bt_21_real_time.table_is_empty_int_sales_retail_.84e7595f5d": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('int_sales_retail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_int_sales_retail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_int_sales_retail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_int_sales_retail_.84e7595f5d", "fqn": ["bt_21_real_time", "table_is_empty_int_sales_retail_"], "alias": "table_is_empty_int_sales_retail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.379488, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_sales_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.int_sales_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_sales_retail"}, "test.bt_21_real_time.dbt_utils_recency_int_sales_retail_day__extract_date__1.166aa57288": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('int_sales_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_int_sales_retail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_int_sales_retail_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_int_sales_retail_day__extract_date__1.166aa57288", "fqn": ["bt_21_real_time", "dbt_utils_recency_int_sales_retail_day__extract_date__1"], "alias": "dbt_utils_recency_int_sales_retail_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.3832724, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_sales_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.int_sales_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_sales_retail"}, "test.bt_21_real_time.dbt_utils_recency_int_sales_retail_day__datetime_timestamp__1.fa0e017468": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "datetime_timestamp", "interval": 1, "model": "{{ get_where_subquery(ref('int_sales_retail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_int_sales_retail_day__datetime_timestamp__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_int_sales_retail_day__datetime_timestamp__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_int_sales_retail_day__datetime_timestamp__1.fa0e017468", "fqn": ["bt_21_real_time", "dbt_utils_recency_int_sales_retail_day__datetime_timestamp__1"], "alias": "dbt_utils_recency_int_sales_retail_day__datetime_timestamp__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.388088, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_sales_retail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.int_sales_retail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_sales_retail"}, "test.bt_21_real_time.not_null_int_dispensary_trace_location.9185421992": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "location", "model": "{{ get_where_subquery(ref('int_dispensary_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_int_dispensary_trace_location", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_int_dispensary_trace_location.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_int_dispensary_trace_location.9185421992", "fqn": ["bt_21_real_time", "not_null_int_dispensary_trace_location"], "alias": "not_null_int_dispensary_trace_location", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.3928442, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_dispensary_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "location", "file_key_name": "models.int_dispensary_trace"}, "test.bt_21_real_time.unique_int_dispensary_trace_location.4cab66fd66": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "location", "model": "{{ get_where_subquery(ref('int_dispensary_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "unique_int_dispensary_trace_location", "resource_type": "test", "package_name": "bt_21_real_time", "path": "unique_int_dispensary_trace_location.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.unique_int_dispensary_trace_location.4cab66fd66", "fqn": ["bt_21_real_time", "unique_int_dispensary_trace_location"], "alias": "unique_int_dispensary_trace_location", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.3946798, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_dispensary_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "column_name": "location", "file_key_name": "models.int_dispensary_trace"}, "test.bt_21_real_time.table_is_empty_int_dispensary_trace_.0de2b9587f": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('int_dispensary_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_int_dispensary_trace_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_int_dispensary_trace_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_int_dispensary_trace_.0de2b9587f", "fqn": ["bt_21_real_time", "table_is_empty_int_dispensary_trace_"], "alias": "table_is_empty_int_dispensary_trace_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.3964922, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_dispensary_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_dispensary_trace"}, "test.bt_21_real_time.dbt_utils_recency_int_dispensary_trace_day__extract_date__1.47556ecee7": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('int_dispensary_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_int_dispensary_trace_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_int_dispensary_trace_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_int_dispensary_trace_day__extract_date__1.47556ecee7", "fqn": ["bt_21_real_time", "dbt_utils_recency_int_dispensary_trace_day__extract_date__1"], "alias": "dbt_utils_recency_int_dispensary_trace_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.4005032, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_dispensary_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_dispensary_trace"}, "test.bt_21_real_time.not_null_int_products_trace_productid.5b63f54130": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "productid", "model": "{{ get_where_subquery(ref('int_products_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_int_products_trace_productid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_int_products_trace_productid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_int_products_trace_productid.5b63f54130", "fqn": ["bt_21_real_time", "not_null_int_products_trace_productid"], "alias": "not_null_int_products_trace_productid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.405389, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_products_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "productid", "file_key_name": "models.int_products_trace"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_products_trace_location__productid.580c936afa": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["location", "productid"], "model": "{{ get_where_subquery(ref('int_products_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_products_trace_location__productid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_a6387d392058cfeaa4729abb894b0a2d.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_products_trace_location__productid.580c936afa", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_int_products_trace_location__productid"], "alias": "dbt_utils_unique_combination_o_a6387d392058cfeaa4729abb894b0a2d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_a6387d392058cfeaa4729abb894b0a2d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a6387d392058cfeaa4729abb894b0a2d"}, "created_at": 1686068134.407273, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a6387d392058cfeaa4729abb894b0a2d\") }}", "language": "sql", "refs": [["int_products_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_products_trace"}, "test.bt_21_real_time.table_is_empty_int_products_trace_.ed9da0d906": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('int_products_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_int_products_trace_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_int_products_trace_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_int_products_trace_.ed9da0d906", "fqn": ["bt_21_real_time", "table_is_empty_int_products_trace_"], "alias": "table_is_empty_int_products_trace_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.4121408, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_products_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_products_trace"}, "test.bt_21_real_time.dbt_utils_recency_int_products_trace_day__extract_date__1.54ab5d415e": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('int_products_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_int_products_trace_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_int_products_trace_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_int_products_trace_day__extract_date__1.54ab5d415e", "fqn": ["bt_21_real_time", "dbt_utils_recency_int_products_trace_day__extract_date__1"], "alias": "dbt_utils_recency_int_products_trace_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.4166954, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_products_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_products_trace"}, "test.bt_21_real_time.dbt_utils_recency_int_products_trace_day__sessiontime_timestamp__1.89eafb62cf": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "sessiontime_timestamp", "interval": 1, "model": "{{ get_where_subquery(ref('int_products_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_int_products_trace_day__sessiontime_timestamp__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_int_products_384379c439ee7c090e194c47a4f7c58d.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_int_products_trace_day__sessiontime_timestamp__1.89eafb62cf", "fqn": ["bt_21_real_time", "dbt_utils_recency_int_products_trace_day__sessiontime_timestamp__1"], "alias": "dbt_utils_recency_int_products_384379c439ee7c090e194c47a4f7c58d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_recency_int_products_384379c439ee7c090e194c47a4f7c58d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_recency_int_products_384379c439ee7c090e194c47a4f7c58d"}, "created_at": 1686068134.4215782, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_recency_int_products_384379c439ee7c090e194c47a4f7c58d\") }}", "language": "sql", "refs": [["int_products_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_products_trace"}, "test.bt_21_real_time.not_null_int_sales_trace_saleid.b593dc708a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "saleid", "model": "{{ get_where_subquery(ref('int_sales_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_int_sales_trace_saleid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_int_sales_trace_saleid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_int_sales_trace_saleid.b593dc708a", "fqn": ["bt_21_real_time", "not_null_int_sales_trace_saleid"], "alias": "not_null_int_sales_trace_saleid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.4263988, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_sales_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "saleid", "file_key_name": "models.int_sales_trace"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_sales_trace_location__saleid.902ce16c07": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["location", "saleid"], "model": "{{ get_where_subquery(ref('int_sales_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_int_sales_trace_location__saleid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_8258f00e95eb496aec9320b311cd294e.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_sales_trace_location__saleid.902ce16c07", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_int_sales_trace_location__saleid"], "alias": "dbt_utils_unique_combination_o_8258f00e95eb496aec9320b311cd294e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_8258f00e95eb496aec9320b311cd294e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8258f00e95eb496aec9320b311cd294e"}, "created_at": 1686068134.4289458, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8258f00e95eb496aec9320b311cd294e\") }}", "language": "sql", "refs": [["int_sales_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_sales_trace"}, "test.bt_21_real_time.table_is_empty_int_sales_trace_.7dd7ddab02": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('int_sales_trace')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_int_sales_trace_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_int_sales_trace_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_int_sales_trace_.7dd7ddab02", "fqn": ["bt_21_real_time", "table_is_empty_int_sales_trace_"], "alias": "table_is_empty_int_sales_trace_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.4337142, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_sales_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_sales_trace"}, "test.bt_21_real_time.dbt_utils_recency_int_sales_trace_day__extract_date__1.c5379783f7": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('int_sales_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_int_sales_trace_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_int_sales_trace_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_int_sales_trace_day__extract_date__1.c5379783f7", "fqn": ["bt_21_real_time", "dbt_utils_recency_int_sales_trace_day__extract_date__1"], "alias": "dbt_utils_recency_int_sales_trace_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.437729, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_sales_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_sales_trace"}, "test.bt_21_real_time.dbt_utils_recency_int_sales_trace_day__sessiontime_timestamp__1.d287aa9de6": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "sessiontime_timestamp", "interval": 1, "model": "{{ get_where_subquery(ref('int_sales_trace')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_int_sales_trace_day__sessiontime_timestamp__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_int_sales_trace_day__sessiontime_timestamp__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_int_sales_trace_day__sessiontime_timestamp__1.d287aa9de6", "fqn": ["bt_21_real_time", "dbt_utils_recency_int_sales_trace_day__sessiontime_timestamp__1"], "alias": "dbt_utils_recency_int_sales_trace_day__sessiontime_timestamp__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.4425213, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["int_sales_trace"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.int_sales_trace"}, "test.bt_21_real_time.not_null_retail_customer_dispensary_facts_customer_id.8c8c863224": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('retail_customer_dispensary_facts')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_retail_customer_dispensary_facts_customer_id", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_retail_customer_dispensary_facts_customer_id.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_retail_customer_dispensary_facts_customer_id.8c8c863224", "fqn": ["bt_21_real_time", "not_null_retail_customer_dispensary_facts_customer_id"], "alias": "not_null_retail_customer_dispensary_facts_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.4470518, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["retail_customer_dispensary_facts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "customer_id", "file_key_name": "models.retail_customer_dispensary_facts"}, "test.bt_21_real_time.not_null_retail_dispensary_all_view_dispensary_id.4d8d54dd9d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dispensary_id", "model": "{{ get_where_subquery(ref('retail_dispensary_all_view')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_retail_dispensary_all_view_dispensary_id", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_retail_dispensary_all_view_dispensary_id.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_retail_dispensary_all_view_dispensary_id.4d8d54dd9d", "fqn": ["bt_21_real_time", "not_null_retail_dispensary_all_view_dispensary_id"], "alias": "not_null_retail_dispensary_all_view_dispensary_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.4491265, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["retail_dispensary_all_view"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "dispensary_id", "file_key_name": "models.retail_dispensary_all_view"}, "test.bt_21_real_time.unique_retail_dispensary_all_view_dispensary_id.d3315173f7": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "dispensary_id", "model": "{{ get_where_subquery(ref('retail_dispensary_all_view')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "unique_retail_dispensary_all_view_dispensary_id", "resource_type": "test", "package_name": "bt_21_real_time", "path": "unique_retail_dispensary_all_view_dispensary_id.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.unique_retail_dispensary_all_view_dispensary_id.d3315173f7", "fqn": ["bt_21_real_time", "unique_retail_dispensary_all_view_dispensary_id"], "alias": "unique_retail_dispensary_all_view_dispensary_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.4509432, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["retail_dispensary_all_view"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "column_name": "dispensary_id", "file_key_name": "models.retail_dispensary_all_view"}, "test.bt_21_real_time.table_is_empty_retail_dispensary_all_view_.d4129b88cf": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('retail_dispensary_all_view')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_retail_dispensary_all_view_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_retail_dispensary_all_view_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_retail_dispensary_all_view_.d4129b88cf", "fqn": ["bt_21_real_time", "table_is_empty_retail_dispensary_all_view_"], "alias": "table_is_empty_retail_dispensary_all_view_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.4527278, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["retail_dispensary_all_view"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.retail_dispensary_all_view"}, "test.bt_21_real_time.dbt_utils_recency_retail_dispensary_all_view_day__extract_date__1.11bbac11ed": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('retail_dispensary_all_view')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_retail_dispensary_all_view_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_retail_dispe_0983ad20ef867101883b7e0683b172cb.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_retail_dispensary_all_view_day__extract_date__1.11bbac11ed", "fqn": ["bt_21_real_time", "dbt_utils_recency_retail_dispensary_all_view_day__extract_date__1"], "alias": "dbt_utils_recency_retail_dispe_0983ad20ef867101883b7e0683b172cb", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_recency_retail_dispe_0983ad20ef867101883b7e0683b172cb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_recency_retail_dispe_0983ad20ef867101883b7e0683b172cb"}, "created_at": 1686068134.4568403, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_recency_retail_dispe_0983ad20ef867101883b7e0683b172cb\") }}", "language": "sql", "refs": [["retail_dispensary_all_view"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.retail_dispensary_all_view"}, "test.bt_21_real_time.not_null_retail_product_inventory_guid_product_inventory.9813178e2e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "guid_product_inventory", "model": "{{ get_where_subquery(ref('retail_product_inventory')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_retail_product_inventory_guid_product_inventory", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_retail_product_inventory_guid_product_inventory.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_retail_product_inventory_guid_product_inventory.9813178e2e", "fqn": ["bt_21_real_time", "not_null_retail_product_inventory_guid_product_inventory"], "alias": "not_null_retail_product_inventory_guid_product_inventory", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.4616554, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["retail_product_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "guid_product_inventory", "file_key_name": "models.retail_product_inventory"}, "test.bt_21_real_time.unique_retail_product_inventory_guid_product_inventory.3047ccd2ce": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "guid_product_inventory", "model": "{{ get_where_subquery(ref('retail_product_inventory')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "unique_retail_product_inventory_guid_product_inventory", "resource_type": "test", "package_name": "bt_21_real_time", "path": "unique_retail_product_inventory_guid_product_inventory.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.unique_retail_product_inventory_guid_product_inventory.3047ccd2ce", "fqn": ["bt_21_real_time", "unique_retail_product_inventory_guid_product_inventory"], "alias": "unique_retail_product_inventory_guid_product_inventory", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.4634671, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["retail_product_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "compiled_path": null, "column_name": "guid_product_inventory", "file_key_name": "models.retail_product_inventory"}, "test.bt_21_real_time.table_is_empty_retail_product_inventory_.27147de65f": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('retail_product_inventory')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_retail_product_inventory_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_retail_product_inventory_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_retail_product_inventory_.27147de65f", "fqn": ["bt_21_real_time", "table_is_empty_retail_product_inventory_"], "alias": "table_is_empty_retail_product_inventory_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.4655614, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["retail_product_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.retail_product_inventory"}, "test.bt_21_real_time.dbt_utils_recency_retail_product_inventory_day__extract_date__1.9cfc62efaa": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('retail_product_inventory')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_retail_product_inventory_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_retail_product_inventory_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_retail_product_inventory_day__extract_date__1.9cfc62efaa", "fqn": ["bt_21_real_time", "dbt_utils_recency_retail_product_inventory_day__extract_date__1"], "alias": "dbt_utils_recency_retail_product_inventory_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.469356, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["retail_product_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.retail_product_inventory"}, "test.bt_21_real_time.dbt_utils_recency_retail_product_inventory_day__sessiontime_timestamp__1.899f29dcc4": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "sessiontime_timestamp", "interval": 1, "model": "{{ get_where_subquery(ref('retail_product_inventory')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_retail_product_inventory_day__sessiontime_timestamp__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_retail_produ_5259c426a267e09329bb335a39555ce3.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_retail_product_inventory_day__sessiontime_timestamp__1.899f29dcc4", "fqn": ["bt_21_real_time", "dbt_utils_recency_retail_product_inventory_day__sessiontime_timestamp__1"], "alias": "dbt_utils_recency_retail_produ_5259c426a267e09329bb335a39555ce3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_recency_retail_produ_5259c426a267e09329bb335a39555ce3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_recency_retail_produ_5259c426a267e09329bb335a39555ce3"}, "created_at": 1686068134.474177, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_recency_retail_produ_5259c426a267e09329bb335a39555ce3\") }}", "language": "sql", "refs": [["retail_product_inventory"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.retail_product_inventory"}, "test.bt_21_real_time.not_null_retail_transaction_detail_saleid.64e773ed0b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "saleid", "model": "{{ get_where_subquery(ref('retail_transaction_detail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_retail_transaction_detail_saleid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_retail_transaction_detail_saleid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_retail_transaction_detail_saleid.64e773ed0b", "fqn": ["bt_21_real_time", "not_null_retail_transaction_detail_saleid"], "alias": "not_null_retail_transaction_detail_saleid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.4792514, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["retail_transaction_detail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.bt_21_real_time.retail_transaction_detail"]}, "compiled_path": null, "column_name": "saleid", "file_key_name": "models.retail_transaction_detail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_retail_transaction_detail_source_dispensary_org_id__source_dispensary_location_id__saleid.6ac532851f": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_dispensary_org_id", "source_dispensary_location_id", "saleid"], "model": "{{ get_where_subquery(ref('retail_transaction_detail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_retail_transaction_detail_source_dispensary_org_id__source_dispensary_location_id__saleid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_7d3913e6fa8f86bc80a57261a570be3d.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_retail_transaction_detail_source_dispensary_org_id__source_dispensary_location_id__saleid.6ac532851f", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_retail_transaction_detail_source_dispensary_org_id__source_dispensary_location_id__saleid"], "alias": "dbt_utils_unique_combination_o_7d3913e6fa8f86bc80a57261a570be3d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7d3913e6fa8f86bc80a57261a570be3d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7d3913e6fa8f86bc80a57261a570be3d"}, "created_at": 1686068134.4810553, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7d3913e6fa8f86bc80a57261a570be3d\") }}", "language": "sql", "refs": [["retail_transaction_detail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.retail_transaction_detail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.retail_transaction_detail"}, "test.bt_21_real_time.table_is_empty_retail_transaction_detail_.4cfe41e17a": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('retail_transaction_detail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_retail_transaction_detail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_retail_transaction_detail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_retail_transaction_detail_.4cfe41e17a", "fqn": ["bt_21_real_time", "table_is_empty_retail_transaction_detail_"], "alias": "table_is_empty_retail_transaction_detail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.486448, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["retail_transaction_detail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.retail_transaction_detail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.retail_transaction_detail"}, "test.bt_21_real_time.dbt_utils_recency_retail_transaction_detail_day__extract_date__1.7194b5d7cc": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('retail_transaction_detail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_retail_transaction_detail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_retail_trans_20f248ffdc631abfe34ebabd03d7fda1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_retail_transaction_detail_day__extract_date__1.7194b5d7cc", "fqn": ["bt_21_real_time", "dbt_utils_recency_retail_transaction_detail_day__extract_date__1"], "alias": "dbt_utils_recency_retail_trans_20f248ffdc631abfe34ebabd03d7fda1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_retail_trans_20f248ffdc631abfe34ebabd03d7fda1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_recency_retail_trans_20f248ffdc631abfe34ebabd03d7fda1"}, "created_at": 1686068134.4902587, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_recency_retail_trans_20f248ffdc631abfe34ebabd03d7fda1\") }}", "language": "sql", "refs": [["retail_transaction_detail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.retail_transaction_detail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.retail_transaction_detail"}, "test.bt_21_real_time.dbt_utils_recency_retail_transaction_detail_day__datetime_timestamp__1.17b25e32b7": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "datetime_timestamp", "interval": 1, "model": "{{ get_where_subquery(ref('retail_transaction_detail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_retail_transaction_detail_day__datetime_timestamp__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_retail_trans_c6acf9556650d469e87665d8ef8fbe8d.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_retail_transaction_detail_day__datetime_timestamp__1.17b25e32b7", "fqn": ["bt_21_real_time", "dbt_utils_recency_retail_transaction_detail_day__datetime_timestamp__1"], "alias": "dbt_utils_recency_retail_trans_c6acf9556650d469e87665d8ef8fbe8d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_retail_trans_c6acf9556650d469e87665d8ef8fbe8d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_recency_retail_trans_c6acf9556650d469e87665d8ef8fbe8d"}, "created_at": 1686068134.4952998, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_recency_retail_trans_c6acf9556650d469e87665d8ef8fbe8d\") }}", "language": "sql", "refs": [["retail_transaction_detail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": ["model.bt_21_real_time.retail_transaction_detail"]}, "compiled_path": null, "column_name": null, "file_key_name": "models.retail_transaction_detail"}, "test.bt_21_real_time.not_null_trace_customer_dispensary_facts_customer_id.ac84eae0de": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('trace_customer_dispensary_facts')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_trace_customer_dispensary_facts_customer_id", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_trace_customer_dispensary_facts_customer_id.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_trace_customer_dispensary_facts_customer_id.ac84eae0de", "fqn": ["bt_21_real_time", "not_null_trace_customer_dispensary_facts_customer_id"], "alias": "not_null_trace_customer_dispensary_facts_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.5003903, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["trace_customer_dispensary_facts"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "customer_id", "file_key_name": "models.trace_customer_dispensary_facts"}, "test.bt_21_real_time.not_null_trace_transaction_detail_saleid.ce342debb1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "saleid", "model": "{{ get_where_subquery(ref('trace_transaction_detail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "not_null_trace_transaction_detail_saleid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "not_null_trace_transaction_detail_saleid.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.not_null_trace_transaction_detail_saleid.ce342debb1", "fqn": ["bt_21_real_time", "not_null_trace_transaction_detail_saleid"], "alias": "not_null_trace_transaction_detail_saleid", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.5022037, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["trace_transaction_detail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "column_name": "saleid", "file_key_name": "models.trace_transaction_detail"}, "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_trace_transaction_detail_source_dispensary_location_id__saleid.83564fd882": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["source_dispensary_location_id", "saleid"], "model": "{{ get_where_subquery(ref('trace_transaction_detail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_trace_transaction_detail_source_dispensary_location_id__saleid", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_unique_combination_o_1a7517f01b9068fbe02128ce7ac25fa1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_trace_transaction_detail_source_dispensary_location_id__saleid.83564fd882", "fqn": ["bt_21_real_time", "dbt_utils_unique_combination_of_columns_trace_transaction_detail_source_dispensary_location_id__saleid"], "alias": "dbt_utils_unique_combination_o_1a7517f01b9068fbe02128ce7ac25fa1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_1a7517f01b9068fbe02128ce7ac25fa1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_1a7517f01b9068fbe02128ce7ac25fa1"}, "created_at": 1686068134.5040176, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1a7517f01b9068fbe02128ce7ac25fa1\") }}", "language": "sql", "refs": [["trace_transaction_detail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.trace_transaction_detail"}, "test.bt_21_real_time.table_is_empty_trace_transaction_detail_.a4bf225c11": {"test_metadata": {"name": "table_is_empty", "kwargs": {"model": "{{ get_where_subquery(ref('trace_transaction_detail')) }}"}, "namespace": null}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "table_is_empty_trace_transaction_detail_", "resource_type": "test", "package_name": "bt_21_real_time", "path": "table_is_empty_trace_transaction_detail_.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.table_is_empty_trace_transaction_detail_.a4bf225c11", "fqn": ["bt_21_real_time", "table_is_empty_trace_transaction_detail_"], "alias": "table_is_empty_trace_transaction_detail_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.509079, "relation_name": null, "raw_code": "{{ test_table_is_empty(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["trace_transaction_detail"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.bt_21_real_time.test_table_is_empty", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.trace_transaction_detail"}, "test.bt_21_real_time.dbt_utils_recency_trace_transaction_detail_day__extract_date__1.a7c26eec2a": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "extract_date", "interval": 1, "model": "{{ get_where_subquery(ref('trace_transaction_detail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_trace_transaction_detail_day__extract_date__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_trace_transaction_detail_day__extract_date__1.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_trace_transaction_detail_day__extract_date__1.a7c26eec2a", "fqn": ["bt_21_real_time", "dbt_utils_recency_trace_transaction_detail_day__extract_date__1"], "alias": "dbt_utils_recency_trace_transaction_detail_day__extract_date__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1686068134.512889, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["trace_transaction_detail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.trace_transaction_detail"}, "test.bt_21_real_time.dbt_utils_recency_trace_transaction_detail_day__sessiontime_timestamp__1.d450d85f42": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "sessiontime_timestamp", "interval": 1, "model": "{{ get_where_subquery(ref('trace_transaction_detail')) }}"}, "namespace": "dbt_utils"}, "database": "PC_FIVETRAN_DB", "schema": "dbt_real_time_dbt_test__audit", "name": "dbt_utils_recency_trace_transaction_detail_day__sessiontime_timestamp__1", "resource_type": "test", "package_name": "bt_21_real_time", "path": "dbt_utils_recency_trace_transa_13192062bdd13df17a67da85ec0c3b47.sql", "original_file_path": "models/bt_backend_data.yml", "unique_id": "test.bt_21_real_time.dbt_utils_recency_trace_transaction_detail_day__sessiontime_timestamp__1.d450d85f42", "fqn": ["bt_21_real_time", "dbt_utils_recency_trace_transaction_detail_day__sessiontime_timestamp__1"], "alias": "dbt_utils_recency_trace_transa_13192062bdd13df17a67da85ec0c3b47", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_recency_trace_transa_13192062bdd13df17a67da85ec0c3b47", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_recency_trace_transa_13192062bdd13df17a67da85ec0c3b47"}, "created_at": 1686068134.5181806, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_recency_trace_transa_13192062bdd13df17a67da85ec0c3b47\") }}", "language": "sql", "refs": [["trace_transaction_detail"]], "sources": [], "metrics": [], "depends_on": {"macros": [null, "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "column_name": null, "file_key_name": "models.trace_transaction_detail"}}, "sources": {"source.bt_21_real_time.postgres_cann_replication_public.bmsi_customers_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "bmsi_customers_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.bmsi_customers_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "bmsi_customers_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "bmsi_customers_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.bmsi_customers_raw", "created_at": 1686068134.5410814}, "source.bt_21_real_time.postgres_cann_replication_public.bmsi_dispensing_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "bmsi_dispensing_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.bmsi_dispensing_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "bmsi_dispensing_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "bmsi_dispensing_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.bmsi_dispensing_raw", "created_at": 1686068134.5413473}, "source.bt_21_real_time.postgres_cann_replication_public.bmsi_locations_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "bmsi_locations_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.bmsi_locations_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "bmsi_locations_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "bmsi_locations_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.bmsi_locations_raw", "created_at": 1686068134.5415864}, "source.bt_21_real_time.postgres_cann_replication_public.bmsi_inventory_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "bmsi_inventory_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.bmsi_inventory_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "bmsi_inventory_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "bmsi_inventory_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.bmsi_inventory_raw", "created_at": 1686068134.5417976}, "source.bt_21_real_time.postgres_cann_replication_public.log_bmsi_inventory_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "log_bmsi_inventory_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.log_bmsi_inventory_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "log_bmsi_inventory_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "log_bmsi_inventory_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.log_bmsi_inventory_raw", "created_at": 1686068134.5420046}, "source.bt_21_real_time.postgres_cann_replication_public.bmsi_inventoryrooms_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "bmsi_inventoryrooms_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.bmsi_inventoryrooms_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "bmsi_inventoryrooms_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "bmsi_inventoryrooms_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.bmsi_inventoryrooms_raw", "created_at": 1686068134.5422094}, "source.bt_21_real_time.postgres_cann_replication_public.bmsi_inventorytypes_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "bmsi_inventorytypes_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.bmsi_inventorytypes_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "bmsi_inventorytypes_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "bmsi_inventorytypes_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.bmsi_inventorytypes_raw", "created_at": 1686068134.542426}, "source.bt_21_real_time.postgres_cann_replication_public.customers_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "customers_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.customers_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "customers_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "customers_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.customers_raw", "created_at": 1686068134.5426311}, "source.bt_21_real_time.postgres_cann_replication_public.conditions_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "conditions_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.conditions_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "conditions_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "conditions_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.conditions_raw", "created_at": 1686068134.5428352}, "source.bt_21_real_time.postgres_cann_replication_public.discounts_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "discounts_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.discounts_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "discounts_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "discounts_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.discounts_raw", "created_at": 1686068134.5430408}, "source.bt_21_real_time.postgres_cann_replication_public.inventorylog_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "inventorylog_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.inventorylog_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "inventorylog_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "inventorylog_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.inventorylog_raw", "created_at": 1686068134.5432434}, "source.bt_21_real_time.postgres_cann_replication_public.inventory_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "inventory_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.inventory_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "inventory_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "inventory_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.inventory_raw", "created_at": 1686068134.5434468}, "source.bt_21_real_time.postgres_cann_replication_public.inventoryrooms_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "inventoryrooms_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.inventoryrooms_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "inventoryrooms_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "inventoryrooms_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.inventoryrooms_raw", "created_at": 1686068134.5436504}, "source.bt_21_real_time.postgres_cann_replication_public.inventorytypes_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "inventorytypes_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.inventorytypes_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "inventorytypes_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "inventorytypes_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.inventorytypes_raw", "created_at": 1686068134.5438516}, "source.bt_21_real_time.postgres_cann_replication_public.locations_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "locations_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.locations_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "locations_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "locations_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.locations_raw", "created_at": 1686068134.5440533}, "source.bt_21_real_time.postgres_cann_replication_public.location_type_desc": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "location_type_desc", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.location_type_desc", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "location_type_desc"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "location_type_desc", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.location_type_desc", "created_at": 1686068134.544252}, "source.bt_21_real_time.postgres_cann_replication_public.org": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "org", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.org", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "org"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "org", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.org", "created_at": 1686068134.5444546}, "source.bt_21_real_time.postgres_cann_replication_public.payments_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "payments_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.payments_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "payments_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "payments_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.payments_raw", "created_at": 1686068134.5446582}, "source.bt_21_real_time.postgres_cann_replication_public.perfs_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "perfs_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.perfs_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "perfs_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "perfs_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.perfs_raw", "created_at": 1686068134.5448632}, "source.bt_21_real_time.postgres_cann_replication_public.productcategories_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "productcategories_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.productcategories_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "productcategories_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "productcategories_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.productcategories_raw", "created_at": 1686068134.545067}, "source.bt_21_real_time.postgres_cann_replication_public.productslog_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "productslog_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.productslog_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "productslog_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "productslog_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.productslog_raw", "created_at": 1686068134.5452714}, "source.bt_21_real_time.postgres_cann_replication_public.products_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "products_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.products_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "products_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "products_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.products_raw", "created_at": 1686068134.5455062}, "source.bt_21_real_time.postgres_cann_replication_public.rooms_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "rooms_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.rooms_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "rooms_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "rooms_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.rooms_raw", "created_at": 1686068134.5457206}, "source.bt_21_real_time.postgres_cann_replication_public.sales_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "sales_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.sales_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "sales_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "sales_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.sales_raw", "created_at": 1686068134.5459235}, "source.bt_21_real_time.postgres_cann_replication_public.taxcategories_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "taxcategories_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.taxcategories_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "taxcategories_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "taxcategories_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.taxcategories_raw", "created_at": 1686068134.5461257}, "source.bt_21_real_time.postgres_cann_replication_public.tickets_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "tickets_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.tickets_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "tickets_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "tickets_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.tickets_raw", "created_at": 1686068134.5464118}, "source.bt_21_real_time.postgres_cann_replication_public.vendors_raw": {"database": "PC_FIVETRAN_DB", "schema": "postgres_cann_replication_public", "name": "vendors_raw", "resource_type": "source", "package_name": "bt_21_real_time", "path": "models/bt_backend_data.yml", "original_file_path": "models/bt_backend_data.yml", "unique_id": "source.bt_21_real_time.postgres_cann_replication_public.vendors_raw", "fqn": ["bt_21_real_time", "postgres_cann_replication_public", "vendors_raw"], "source_name": "postgres_cann_replication_public", "source_description": "Trace tables in snowflake", "loader": "", "identifier": "vendors_raw", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "PC_FIVETRAN_DB.postgres_cann_replication_public.vendors_raw", "created_at": 1686068134.546627}}, "macros": {"macro.bt_21_real_time.test_table_is_empty": {"name": "test_table_is_empty", "resource_type": "macro", "package_name": "bt_21_real_time", "path": "tests/generic/table_is_empty.sql", "original_file_path": "tests/generic/table_is_empty.sql", "unique_id": "macro.bt_21_real_time.test_table_is_empty", "macro_sql": "{% test table_is_empty(model) %}\n\nwith\n-- count all rows for a table\ncount_rows as (\n    select \n        count(*) as row_count\n    from {{ model }}\n),\n\n-- failure occurs if the test has any rows\ntest as (\n    select *\n    from count_rows\n    -- keep the row count only if its 0, ie it fails\n    where row_count = 0\n)\n\nselect *\nfrom test\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1123931, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from(\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1350234, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1367173, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1373806, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1392155, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1395724, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1412678, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1425483, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1436963, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1444352, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1448927, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1454868, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1459584, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1470976, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1475468, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1479268, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1489918, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1494198, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1506233, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1524532, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.15297, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1535575, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1552367, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1558585, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1561244, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1566749, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1570885, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1573594, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1576393, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1579525, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1582854, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.158786, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1592093, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1596186, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1600025, "supported_languages": null}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1611736, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.162001, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1672835, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1750033, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1754138, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1777854, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1784868, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1790674, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.179846, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1844542, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    df.write.mode(\"overwrite\").save_as_table(\"{{ target_relation }}\", create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1849582, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1851869, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1893463, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1900635, "supported_languages": ["sql"]}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1906457, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1912959, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.192002, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.193179, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1956565, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.196257, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.196683, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.197051, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1974807, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1980467, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1985185, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.199353, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.1997924, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.200171, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.201022, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2019815, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2029278, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2032814, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.203615, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2038677, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2042449, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2044282, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2048035, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2051816, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2103577, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2107508, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.211238, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2118819, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.212436, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2131448, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.213596, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2140985, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2145321, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2149167, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2155082, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2161689, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2167234, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2179618, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2184997, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2188401, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2192874, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2221375, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2224352, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2228203, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2230835, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2238557, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2242844, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2245328, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2250333, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.225491, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2260137, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2264574, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.22697, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.228456, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2288961, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.229488, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2300186, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.232641, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2339253, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2343276, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2347956, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2351854, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2357852, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2368467, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2376618, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2381022, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2384915, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2389228, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2416747, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2420526, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2427666, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.243194, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2439518, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2444692, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2458117, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2464056, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2486172, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2495594, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2498832, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2502546, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2511466, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2519603, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2525432, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2535756, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2541776, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2548335, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2556162, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2561429, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2591531, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2604337, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2611005, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.264158, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2669349, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2685804, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2691133, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2698603, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2702522, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2708588, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2711742, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2717857, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2721028, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.272655, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.272908, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2734866, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.273757, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2744985, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2750928, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2754352, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2759492, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2761369, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2766829, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2769763, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.277722, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2781081, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2787614, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.279082, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2796218, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2798789, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2806418, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2809572, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.281521, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2818918, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2830827, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2839968, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.284992, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2853794, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2859101, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2866406, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.28703, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.287624, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2880037, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2885907, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.288918, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2894988, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.28976, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2905715, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2911258, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2916408, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2918444, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2924764, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2928047, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.293455, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2937899, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2957284, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2960896, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2964542, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2967963, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2971604, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2975485, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2979321, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2983496, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2987278, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2990801, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.2994523, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.29979, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3001597, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.300496, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.302675, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3031337, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3034737, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3038037, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3041325, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3048747, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3055859, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3063066, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3073158, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3077424, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3088462, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3097825, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3147497, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3175635, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.318801, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3202558, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3207877, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3224022, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3237283, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3335307, "supported_languages": ["sql"]}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3425758, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.346082, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3466887, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3489203, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3495486, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3509724, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.359265, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.361911, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.364647, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3665397, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3681676, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3686988, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.369128, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3698256, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3702652, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3709235, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3713446, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3719268, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.37235, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3727164, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3733366, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3783522, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3813999, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3820786, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3825924, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.383329, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3836958, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3841085, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3846838, "supported_languages": null}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3920193, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3941593, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3947003, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.395764, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3962057, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3965197, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3968449, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3971376, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3975306, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3978105, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.3988736, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.399301, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4019873, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4084373, "supported_languages": ["sql"]}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4193316, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4202223, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4208255, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.426729, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4273953, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4277983, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4280162, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4283502, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4286244, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4290853, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.430975, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4314125, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.43198, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4329195, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4395194, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4399176, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4404302, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.441994, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4423897, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.442788, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4459438, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4487736, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4495811, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4504378, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4513135, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4519908, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4560883, "supported_languages": ["sql"]}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.458397, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4587536, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4596388, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4605327, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4618313, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.462881, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4630651, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4640663, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4645886, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.465226, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1686068133.4658759, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.bt_21_real_time.stg_customers_retail": [], "model.bt_21_real_time.stg_inventory_rooms_retail": [], "model.bt_21_real_time.stg_vendors_retail": [], "model.bt_21_real_time.stg_payments_retail": [], "model.bt_21_real_time.stg_tickets_retail": [], "model.bt_21_real_time.stg_product_categories_retail": [], "model.bt_21_real_time.stg_productslog_retail": [], "model.bt_21_real_time.stg_inventory_retail": [], "model.bt_21_real_time.stg_inventory_types_retail": [], "model.bt_21_real_time.stg_sales_retail": [], "model.bt_21_real_time.stg_location_type_desc": [], "model.bt_21_real_time.stg_org_retail": [], "model.bt_21_real_time.stg_locations_retail": [], "model.bt_21_real_time.stg_products_retail": [], "model.bt_21_real_time.int_sales_retail": ["model.bt_21_real_time.stg_payments_retail", "model.bt_21_real_time.stg_sales_retail", "model.bt_21_real_time.stg_tickets_retail"], "model.bt_21_real_time.int_products_retail": ["model.bt_21_real_time.stg_inventory_retail", "model.bt_21_real_time.stg_inventory_types_retail", "model.bt_21_real_time.stg_product_categories_retail", "model.bt_21_real_time.stg_products_retail", "model.bt_21_real_time.stg_productslog_retail", "model.bt_21_real_time.stg_vendors_retail"], "model.bt_21_real_time.int_dispensary_retail": ["model.bt_21_real_time.stg_location_type_desc", "model.bt_21_real_time.stg_locations_retail", "model.bt_21_real_time.stg_org_retail"], "model.bt_21_real_time.int_customers_retail": ["model.bt_21_real_time.stg_customers_retail"], "model.bt_21_real_time.retail_transaction_detail": ["model.bt_21_real_time.int_customers_retail", "model.bt_21_real_time.int_dispensary_retail", "model.bt_21_real_time.int_products_retail", "model.bt_21_real_time.int_sales_retail"], "model.bt_21_real_time.retail_dispensary_all_views": ["model.bt_21_real_time.retail_transaction_detail"], "test.bt_21_real_time.not_null_stg_customers_retail_customerid.9ff3b43521": ["model.bt_21_real_time.stg_customers_retail"], "test.bt_21_real_time.not_null_stg_customers_retail_org.253f904950": ["model.bt_21_real_time.stg_customers_retail"], "test.bt_21_real_time.not_null_stg_customers_retail_location.49f36794af": ["model.bt_21_real_time.stg_customers_retail"], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_customers_retail_org__location__customerid.e1fb7d6a94": ["model.bt_21_real_time.stg_customers_retail"], "test.bt_21_real_time.table_is_empty_stg_customers_retail_.ff7c636081": ["model.bt_21_real_time.stg_customers_retail"], "test.bt_21_real_time.dbt_utils_recency_stg_customers_retail_day__extract_date__1.03d2719bfe": ["model.bt_21_real_time.stg_customers_retail"], "test.bt_21_real_time.dbt_utils_recency_stg_customers_retail_day__created__1.fdc943d26a": ["model.bt_21_real_time.stg_customers_retail"], "test.bt_21_real_time.not_null_stg_inventory_retail_id.7c9e00423f": ["model.bt_21_real_time.stg_inventory_retail"], "test.bt_21_real_time.not_null_stg_inventory_retail_location.55782909d4": ["model.bt_21_real_time.stg_inventory_retail"], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventory_retail_org__location__id.539731e71c": ["model.bt_21_real_time.stg_inventory_retail"], "test.bt_21_real_time.table_is_empty_stg_inventory_retail_.0a8bc5858b": ["model.bt_21_real_time.stg_inventory_retail"], "test.bt_21_real_time.dbt_utils_recency_stg_inventory_retail_day__extract_date__1.e6a9694bba": ["model.bt_21_real_time.stg_inventory_retail"], "test.bt_21_real_time.dbt_utils_recency_stg_inventory_retail_day__sessiontime_timestamp__1.4da9d5f636": ["model.bt_21_real_time.stg_inventory_retail"], "test.bt_21_real_time.not_null_stg_inventorylogs_retail_logid.f009d09a1c": [], "test.bt_21_real_time.not_null_stg_inventorylogs_retail_inventoryid.736e98b0c7": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventorylogs_retail_org__location__inventoryid.f3b318625a": [], "test.bt_21_real_time.table_is_empty_stg_inventorylogs_retail_.ede3491614": [], "test.bt_21_real_time.dbt_utils_recency_stg_inventorylogs_retail_day__extract_date__1.c80db2c2fa": [], "test.bt_21_real_time.dbt_utils_recency_stg_inventorylogs_retail_day__sessiontime_timestamp__1.7fd0669391": [], "test.bt_21_real_time.not_null_stg_inventory_rooms_retail_id.504fc91af6": ["model.bt_21_real_time.stg_inventory_rooms_retail"], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventory_rooms_retail_org__id.5e24e4312f": ["model.bt_21_real_time.stg_inventory_rooms_retail"], "test.bt_21_real_time.table_is_empty_stg_inventory_rooms_retail_.207a4e8cfd": ["model.bt_21_real_time.stg_inventory_rooms_retail"], "test.bt_21_real_time.dbt_utils_recency_stg_inventory_rooms_retail_day__extract_date__1.cd63107e56": ["model.bt_21_real_time.stg_inventory_rooms_retail"], "test.bt_21_real_time.not_null_stg_inventorytypes_retail_id.22e56b513c": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventorytypes_retail_org__id.3c502bbaf0": [], "test.bt_21_real_time.table_is_empty_stg_inventorytypes_retail_.81dbf99bb5": [], "test.bt_21_real_time.dbt_utils_recency_stg_inventorytypes_retail_day__extract_date__1.14b2d45a77": [], "test.bt_21_real_time.not_null_stg_locations_retail_location.2acb349222": ["model.bt_21_real_time.stg_locations_retail"], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_locations_retail_org__location.18e2e8ef35": ["model.bt_21_real_time.stg_locations_retail"], "test.bt_21_real_time.table_is_empty_stg_locations_retail_.151aec3eb4": ["model.bt_21_real_time.stg_locations_retail"], "test.bt_21_real_time.dbt_utils_recency_stg_locations_retail_day__extract_date__1.6a6d76302e": ["model.bt_21_real_time.stg_locations_retail"], "test.bt_21_real_time.not_null_stg_payments_retail_ticketid.aec60dcd60": ["model.bt_21_real_time.stg_payments_retail"], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_payments_retail_org__location__ticketid.e622a84b75": ["model.bt_21_real_time.stg_payments_retail"], "test.bt_21_real_time.table_is_empty_stg_payments_retail_.4b1740aa92": ["model.bt_21_real_time.stg_payments_retail"], "test.bt_21_real_time.dbt_utils_recency_stg_payments_retail_day__extract_date__1.b5cdc6ee57": ["model.bt_21_real_time.stg_payments_retail"], "test.bt_21_real_time.not_null_stg_product_categories_retail_product_categories_id.75b1ab44b6": ["model.bt_21_real_time.stg_product_categories_retail"], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_product_categories_retail_org__location__product_categories_id.66859d1473": ["model.bt_21_real_time.stg_product_categories_retail"], "test.bt_21_real_time.table_is_empty_stg_product_categories_retail_.7e5f962247": ["model.bt_21_real_time.stg_product_categories_retail"], "test.bt_21_real_time.dbt_utils_recency_stg_product_categories_retail_day__extract_date__1.f7028b0373": ["model.bt_21_real_time.stg_product_categories_retail"], "test.bt_21_real_time.not_null_stg_products_retail_productid.04cc83f906": ["model.bt_21_real_time.stg_products_retail"], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_products_retail_org__productid.b104fe6137": ["model.bt_21_real_time.stg_products_retail"], "test.bt_21_real_time.table_is_empty_stg_products_retail_.5948848e4b": ["model.bt_21_real_time.stg_products_retail"], "test.bt_21_real_time.dbt_utils_recency_stg_products_retail_day__extract_date__1.0a22e661ef": ["model.bt_21_real_time.stg_products_retail"], "test.bt_21_real_time.dbt_utils_recency_stg_products_retail_day__created__1.f888efd9d6": ["model.bt_21_real_time.stg_products_retail"], "test.bt_21_real_time.not_null_stg_productslogs_retail_logid.3e605a877d": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_productslogs_retail_logid__org__location__productid.cc5aa84621": [], "test.bt_21_real_time.table_is_empty_stg_productslogs_retail_.84d4e26014": [], "test.bt_21_real_time.dbt_utils_recency_stg_productslogs_retail_day__extract_date__1.68e395fbef": [], "test.bt_21_real_time.dbt_utils_recency_stg_productslogs_retail_day__sessiontime_timestamp__1.b404cce0ba": [], "test.bt_21_real_time.not_null_stg_sales_retail_saleid.f2fb626ea2": ["model.bt_21_real_time.stg_sales_retail"], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_sales_retail_org__location__saleid.b086e8f2b4": ["model.bt_21_real_time.stg_sales_retail"], "test.bt_21_real_time.table_is_empty_stg_sales_retail_.27dda28ce1": ["model.bt_21_real_time.stg_sales_retail"], "test.bt_21_real_time.dbt_utils_recency_stg_sales_retail_day__extract_date__1.b63e65ef66": ["model.bt_21_real_time.stg_sales_retail"], "test.bt_21_real_time.dbt_utils_recency_stg_sales_retail_day__datetime_timestamp__1.e6fcad5cf7": ["model.bt_21_real_time.stg_sales_retail"], "test.bt_21_real_time.not_null_stg_taxcategories_retail_id.b37d1053e2": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_taxcategories_retail_org__id.71d77f46b2": [], "test.bt_21_real_time.table_is_empty_stg_taxcategories_retail_.a89ef8e918": [], "test.bt_21_real_time.dbt_utils_recency_stg_taxcategories_retail_day__extract_date__1.b9c62ef088": [], "test.bt_21_real_time.not_null_stg_tickets_retail_ticketid.7bd0c2aa19": ["model.bt_21_real_time.stg_tickets_retail"], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_tickets_retail_org__location__ticketid.d8c7e5341c": ["model.bt_21_real_time.stg_tickets_retail"], "test.bt_21_real_time.table_is_empty_stg_tickets_retail_.928947c9f7": ["model.bt_21_real_time.stg_tickets_retail"], "test.bt_21_real_time.dbt_utils_recency_stg_tickets_retail_day__extract_date__1.8d4059b82b": ["model.bt_21_real_time.stg_tickets_retail"], "test.bt_21_real_time.dbt_utils_recency_stg_tickets_retail_day__datetime_timestamp__1.50d1b8dbf3": ["model.bt_21_real_time.stg_tickets_retail"], "test.bt_21_real_time.not_null_stg_vendors_retail_vendorid.f5ce535da5": ["model.bt_21_real_time.stg_vendors_retail"], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_vendors_retail_org__vendorid.d955ded1d3": ["model.bt_21_real_time.stg_vendors_retail"], "test.bt_21_real_time.table_is_empty_stg_vendors_retail_.b73365198a": ["model.bt_21_real_time.stg_vendors_retail"], "test.bt_21_real_time.dbt_utils_recency_stg_vendors_retail_day__extract_date__1.2efc2f2964": ["model.bt_21_real_time.stg_vendors_retail"], "test.bt_21_real_time.not_null_stg_customers_trace_customerid.ad58f59388": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_customers_trace_location__customerid.425f226e05": [], "test.bt_21_real_time.table_is_empty_stg_customers_trace_.de2e65e7cd": [], "test.bt_21_real_time.dbt_utils_recency_stg_customers_trace_day__extract_date__1.a309df89ff": [], "test.bt_21_real_time.dbt_utils_recency_stg_customers_trace_day__created__1.79677c88ba": [], "test.bt_21_real_time.not_null_stg_inventory_trace_id.4e6d17da99": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventory_trace_location__id__productid.e9b7d26047": [], "test.bt_21_real_time.table_is_empty_stg_inventory_trace_.7a170e09c3": [], "test.bt_21_real_time.dbt_utils_recency_stg_inventory_trace_day__extract_date__1.263c484ea8": [], "test.bt_21_real_time.dbt_utils_recency_stg_inventory_trace_day__sessiontime_timestamp__1.23351f2e08": [], "test.bt_21_real_time.not_null_stg_inventorylog_trace_id.c24cae614d": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventorylog_trace_location__id.9b2ae5962c": [], "test.bt_21_real_time.table_is_empty_stg_inventorylog_trace_.d09e4f04cd": [], "test.bt_21_real_time.dbt_utils_recency_stg_inventorylog_trace_day__extract_date__1.e5e7d3cf71": [], "test.bt_21_real_time.dbt_utils_recency_stg_inventorylog_trace_day__sessiontime_timestamp__1.4f3e15d4b6": [], "test.bt_21_real_time.not_null_stg_inventorytypes_trace_id.25b47e5150": [], "test.bt_21_real_time.unique_stg_inventorytypes_trace_id.c8a3c00687": [], "test.bt_21_real_time.table_is_empty_stg_inventorytypes_trace_.5b07f1eeaa": [], "test.bt_21_real_time.dbt_utils_recency_stg_inventorytypes_trace_day__extract_date__1.789ef1fd0c": [], "test.bt_21_real_time.not_null_stg_locations_trace_location.b4a594d766": [], "test.bt_21_real_time.unique_stg_locations_trace_location.a5ee270223": [], "test.bt_21_real_time.table_is_empty_stg_locations_trace_.64edbb7401": [], "test.bt_21_real_time.dbt_utils_recency_stg_locations_trace_day__extract_date__1.ec3bc61dfd": [], "test.bt_21_real_time.not_null_stg_refunds_trace_transactionid_original.1740459e22": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_refunds_trace_location__transactionid_original.d6b7c7409e": [], "test.bt_21_real_time.table_is_empty_stg_refunds_trace_.f47184009e": [], "test.bt_21_real_time.dbt_utils_recency_stg_refunds_trace_day__extract_date__1.a76ff53791": [], "test.bt_21_real_time.not_null_stg_sales_trace_saleid.da28768a91": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_sales_trace_location__saleid.9616ef181a": [], "test.bt_21_real_time.table_is_empty_stg_sales_trace_.9532c1f574": [], "test.bt_21_real_time.dbt_utils_recency_stg_sales_trace_day__extract_date__1.cebabdf998": [], "test.bt_21_real_time.dbt_utils_recency_stg_sales_trace_day__sessiontime_timestamp__1.0b3cacf91f": [], "test.bt_21_real_time.not_null_int_dispensary_retail_org.edfac1204e": ["model.bt_21_real_time.int_dispensary_retail"], "test.bt_21_real_time.not_null_int_dispensary_retail_location.6ec4b98561": ["model.bt_21_real_time.int_dispensary_retail"], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_dispensary_retail_org__location.fa1b7a4c7f": ["model.bt_21_real_time.int_dispensary_retail"], "test.bt_21_real_time.table_is_empty_int_dispensary_retail_.6b350fd05c": ["model.bt_21_real_time.int_dispensary_retail"], "test.bt_21_real_time.dbt_utils_recency_int_dispensary_retail_day__extract_date__1.61bd0e844d": ["model.bt_21_real_time.int_dispensary_retail"], "test.bt_21_real_time.not_null_int_inventory_retail_inventoryid.4a68ec3f34": [], "test.bt_21_real_time.not_null_int_inventory_retail_productid.2f0ede2d15": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_inventory_retail_org__inventoryid__productid.89fe89e73f": [], "test.bt_21_real_time.table_is_empty_int_inventory_retail_.c137b3c6c3": [], "test.bt_21_real_time.dbt_utils_recency_int_inventory_retail_day__extract_date__1.3746bd1b68": [], "test.bt_21_real_time.dbt_utils_recency_int_inventory_retail_day__sessiontime_timestamp__1.68ed70a06f": [], "test.bt_21_real_time.not_null_int_product_inventory_retail_inventoryid.453555db4a": [], "test.bt_21_real_time.not_null_int_product_inventory_retail_productid.6c97ca0f64": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_product_inventory_retail_org__inventoryid__productid.1a575e0044": [], "test.bt_21_real_time.table_is_empty_int_product_inventory_retail_.3101b8cd73": [], "test.bt_21_real_time.dbt_utils_recency_int_product_inventory_retail_day__extract_date__1.e65206ce33": [], "test.bt_21_real_time.dbt_utils_recency_int_product_inventory_retail_day__sessiontime_timestamp__1.798d7d0e8c": [], "test.bt_21_real_time.not_null_int_products_retail_productid.bd99edf342": ["model.bt_21_real_time.int_products_retail"], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_products_retail_org__location__productid.ea86d6d926": ["model.bt_21_real_time.int_products_retail"], "test.bt_21_real_time.table_is_empty_int_products_retail_.cb341b615a": ["model.bt_21_real_time.int_products_retail"], "test.bt_21_real_time.dbt_utils_recency_int_products_retail_day__extract_date__1.f1087aa076": ["model.bt_21_real_time.int_products_retail"], "test.bt_21_real_time.dbt_utils_recency_int_products_retail_day__created__1.478abb364d": ["model.bt_21_real_time.int_products_retail"], "test.bt_21_real_time.not_null_int_sales_retail_saleid.7f2a3ca838": ["model.bt_21_real_time.int_sales_retail"], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_sales_retail_org__location__saleid.041f8a4648": ["model.bt_21_real_time.int_sales_retail"], "test.bt_21_real_time.table_is_empty_int_sales_retail_.84e7595f5d": ["model.bt_21_real_time.int_sales_retail"], "test.bt_21_real_time.dbt_utils_recency_int_sales_retail_day__extract_date__1.166aa57288": ["model.bt_21_real_time.int_sales_retail"], "test.bt_21_real_time.dbt_utils_recency_int_sales_retail_day__datetime_timestamp__1.fa0e017468": ["model.bt_21_real_time.int_sales_retail"], "test.bt_21_real_time.not_null_int_dispensary_trace_location.9185421992": [], "test.bt_21_real_time.unique_int_dispensary_trace_location.4cab66fd66": [], "test.bt_21_real_time.table_is_empty_int_dispensary_trace_.0de2b9587f": [], "test.bt_21_real_time.dbt_utils_recency_int_dispensary_trace_day__extract_date__1.47556ecee7": [], "test.bt_21_real_time.not_null_int_products_trace_productid.5b63f54130": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_products_trace_location__productid.580c936afa": [], "test.bt_21_real_time.table_is_empty_int_products_trace_.ed9da0d906": [], "test.bt_21_real_time.dbt_utils_recency_int_products_trace_day__extract_date__1.54ab5d415e": [], "test.bt_21_real_time.dbt_utils_recency_int_products_trace_day__sessiontime_timestamp__1.89eafb62cf": [], "test.bt_21_real_time.not_null_int_sales_trace_saleid.b593dc708a": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_sales_trace_location__saleid.902ce16c07": [], "test.bt_21_real_time.table_is_empty_int_sales_trace_.7dd7ddab02": [], "test.bt_21_real_time.dbt_utils_recency_int_sales_trace_day__extract_date__1.c5379783f7": [], "test.bt_21_real_time.dbt_utils_recency_int_sales_trace_day__sessiontime_timestamp__1.d287aa9de6": [], "test.bt_21_real_time.not_null_retail_customer_dispensary_facts_customer_id.8c8c863224": [], "test.bt_21_real_time.not_null_retail_dispensary_all_view_dispensary_id.4d8d54dd9d": [], "test.bt_21_real_time.unique_retail_dispensary_all_view_dispensary_id.d3315173f7": [], "test.bt_21_real_time.table_is_empty_retail_dispensary_all_view_.d4129b88cf": [], "test.bt_21_real_time.dbt_utils_recency_retail_dispensary_all_view_day__extract_date__1.11bbac11ed": [], "test.bt_21_real_time.not_null_retail_product_inventory_guid_product_inventory.9813178e2e": [], "test.bt_21_real_time.unique_retail_product_inventory_guid_product_inventory.3047ccd2ce": [], "test.bt_21_real_time.table_is_empty_retail_product_inventory_.27147de65f": [], "test.bt_21_real_time.dbt_utils_recency_retail_product_inventory_day__extract_date__1.9cfc62efaa": [], "test.bt_21_real_time.dbt_utils_recency_retail_product_inventory_day__sessiontime_timestamp__1.899f29dcc4": [], "test.bt_21_real_time.not_null_retail_transaction_detail_saleid.64e773ed0b": ["model.bt_21_real_time.retail_transaction_detail"], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_retail_transaction_detail_source_dispensary_org_id__source_dispensary_location_id__saleid.6ac532851f": ["model.bt_21_real_time.retail_transaction_detail"], "test.bt_21_real_time.table_is_empty_retail_transaction_detail_.4cfe41e17a": ["model.bt_21_real_time.retail_transaction_detail"], "test.bt_21_real_time.dbt_utils_recency_retail_transaction_detail_day__extract_date__1.7194b5d7cc": ["model.bt_21_real_time.retail_transaction_detail"], "test.bt_21_real_time.dbt_utils_recency_retail_transaction_detail_day__datetime_timestamp__1.17b25e32b7": ["model.bt_21_real_time.retail_transaction_detail"], "test.bt_21_real_time.not_null_trace_customer_dispensary_facts_customer_id.ac84eae0de": [], "test.bt_21_real_time.not_null_trace_transaction_detail_saleid.ce342debb1": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_trace_transaction_detail_source_dispensary_location_id__saleid.83564fd882": [], "test.bt_21_real_time.table_is_empty_trace_transaction_detail_.a4bf225c11": [], "test.bt_21_real_time.dbt_utils_recency_trace_transaction_detail_day__extract_date__1.a7c26eec2a": [], "test.bt_21_real_time.dbt_utils_recency_trace_transaction_detail_day__sessiontime_timestamp__1.d450d85f42": [], "source.bt_21_real_time.postgres_cann_replication_public.bmsi_customers_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.bmsi_dispensing_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.bmsi_locations_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.bmsi_inventory_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.log_bmsi_inventory_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.bmsi_inventoryrooms_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.bmsi_inventorytypes_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.customers_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.conditions_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.discounts_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.inventorylog_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.inventory_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.inventoryrooms_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.inventorytypes_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.locations_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.location_type_desc": [], "source.bt_21_real_time.postgres_cann_replication_public.org": [], "source.bt_21_real_time.postgres_cann_replication_public.payments_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.perfs_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.productcategories_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.productslog_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.products_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.rooms_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.sales_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.taxcategories_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.tickets_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.vendors_raw": []}, "child_map": {"model.bt_21_real_time.stg_customers_retail": ["model.bt_21_real_time.int_customers_retail", "test.bt_21_real_time.dbt_utils_recency_stg_customers_retail_day__created__1.fdc943d26a", "test.bt_21_real_time.dbt_utils_recency_stg_customers_retail_day__extract_date__1.03d2719bfe", "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_customers_retail_org__location__customerid.e1fb7d6a94", "test.bt_21_real_time.not_null_stg_customers_retail_customerid.9ff3b43521", "test.bt_21_real_time.not_null_stg_customers_retail_location.49f36794af", "test.bt_21_real_time.not_null_stg_customers_retail_org.253f904950", "test.bt_21_real_time.table_is_empty_stg_customers_retail_.ff7c636081"], "model.bt_21_real_time.stg_inventory_rooms_retail": ["test.bt_21_real_time.dbt_utils_recency_stg_inventory_rooms_retail_day__extract_date__1.cd63107e56", "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventory_rooms_retail_org__id.5e24e4312f", "test.bt_21_real_time.not_null_stg_inventory_rooms_retail_id.504fc91af6", "test.bt_21_real_time.table_is_empty_stg_inventory_rooms_retail_.207a4e8cfd"], "model.bt_21_real_time.stg_vendors_retail": ["model.bt_21_real_time.int_products_retail", "test.bt_21_real_time.dbt_utils_recency_stg_vendors_retail_day__extract_date__1.2efc2f2964", "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_vendors_retail_org__vendorid.d955ded1d3", "test.bt_21_real_time.not_null_stg_vendors_retail_vendorid.f5ce535da5", "test.bt_21_real_time.table_is_empty_stg_vendors_retail_.b73365198a"], "model.bt_21_real_time.stg_payments_retail": ["model.bt_21_real_time.int_sales_retail", "test.bt_21_real_time.dbt_utils_recency_stg_payments_retail_day__extract_date__1.b5cdc6ee57", "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_payments_retail_org__location__ticketid.e622a84b75", "test.bt_21_real_time.not_null_stg_payments_retail_ticketid.aec60dcd60", "test.bt_21_real_time.table_is_empty_stg_payments_retail_.4b1740aa92"], "model.bt_21_real_time.stg_tickets_retail": ["model.bt_21_real_time.int_sales_retail", "test.bt_21_real_time.dbt_utils_recency_stg_tickets_retail_day__datetime_timestamp__1.50d1b8dbf3", "test.bt_21_real_time.dbt_utils_recency_stg_tickets_retail_day__extract_date__1.8d4059b82b", "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_tickets_retail_org__location__ticketid.d8c7e5341c", "test.bt_21_real_time.not_null_stg_tickets_retail_ticketid.7bd0c2aa19", "test.bt_21_real_time.table_is_empty_stg_tickets_retail_.928947c9f7"], "model.bt_21_real_time.stg_product_categories_retail": ["model.bt_21_real_time.int_products_retail", "test.bt_21_real_time.dbt_utils_recency_stg_product_categories_retail_day__extract_date__1.f7028b0373", "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_product_categories_retail_org__location__product_categories_id.66859d1473", "test.bt_21_real_time.not_null_stg_product_categories_retail_product_categories_id.75b1ab44b6", "test.bt_21_real_time.table_is_empty_stg_product_categories_retail_.7e5f962247"], "model.bt_21_real_time.stg_productslog_retail": ["model.bt_21_real_time.int_products_retail"], "model.bt_21_real_time.stg_inventory_retail": ["model.bt_21_real_time.int_products_retail", "test.bt_21_real_time.dbt_utils_recency_stg_inventory_retail_day__extract_date__1.e6a9694bba", "test.bt_21_real_time.dbt_utils_recency_stg_inventory_retail_day__sessiontime_timestamp__1.4da9d5f636", "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventory_retail_org__location__id.539731e71c", "test.bt_21_real_time.not_null_stg_inventory_retail_id.7c9e00423f", "test.bt_21_real_time.not_null_stg_inventory_retail_location.55782909d4", "test.bt_21_real_time.table_is_empty_stg_inventory_retail_.0a8bc5858b"], "model.bt_21_real_time.stg_inventory_types_retail": ["model.bt_21_real_time.int_products_retail"], "model.bt_21_real_time.stg_sales_retail": ["model.bt_21_real_time.int_sales_retail", "test.bt_21_real_time.dbt_utils_recency_stg_sales_retail_day__datetime_timestamp__1.e6fcad5cf7", "test.bt_21_real_time.dbt_utils_recency_stg_sales_retail_day__extract_date__1.b63e65ef66", "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_sales_retail_org__location__saleid.b086e8f2b4", "test.bt_21_real_time.not_null_stg_sales_retail_saleid.f2fb626ea2", "test.bt_21_real_time.table_is_empty_stg_sales_retail_.27dda28ce1"], "model.bt_21_real_time.stg_location_type_desc": ["model.bt_21_real_time.int_dispensary_retail"], "model.bt_21_real_time.stg_org_retail": ["model.bt_21_real_time.int_dispensary_retail"], "model.bt_21_real_time.stg_locations_retail": ["model.bt_21_real_time.int_dispensary_retail", "test.bt_21_real_time.dbt_utils_recency_stg_locations_retail_day__extract_date__1.6a6d76302e", "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_locations_retail_org__location.18e2e8ef35", "test.bt_21_real_time.not_null_stg_locations_retail_location.2acb349222", "test.bt_21_real_time.table_is_empty_stg_locations_retail_.151aec3eb4"], "model.bt_21_real_time.stg_products_retail": ["model.bt_21_real_time.int_products_retail", "test.bt_21_real_time.dbt_utils_recency_stg_products_retail_day__created__1.f888efd9d6", "test.bt_21_real_time.dbt_utils_recency_stg_products_retail_day__extract_date__1.0a22e661ef", "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_products_retail_org__productid.b104fe6137", "test.bt_21_real_time.not_null_stg_products_retail_productid.04cc83f906", "test.bt_21_real_time.table_is_empty_stg_products_retail_.5948848e4b"], "model.bt_21_real_time.int_sales_retail": ["model.bt_21_real_time.retail_transaction_detail", "test.bt_21_real_time.dbt_utils_recency_int_sales_retail_day__datetime_timestamp__1.fa0e017468", "test.bt_21_real_time.dbt_utils_recency_int_sales_retail_day__extract_date__1.166aa57288", "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_sales_retail_org__location__saleid.041f8a4648", "test.bt_21_real_time.not_null_int_sales_retail_saleid.7f2a3ca838", "test.bt_21_real_time.table_is_empty_int_sales_retail_.84e7595f5d"], "model.bt_21_real_time.int_products_retail": ["model.bt_21_real_time.retail_transaction_detail", "test.bt_21_real_time.dbt_utils_recency_int_products_retail_day__created__1.478abb364d", "test.bt_21_real_time.dbt_utils_recency_int_products_retail_day__extract_date__1.f1087aa076", "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_products_retail_org__location__productid.ea86d6d926", "test.bt_21_real_time.not_null_int_products_retail_productid.bd99edf342", "test.bt_21_real_time.table_is_empty_int_products_retail_.cb341b615a"], "model.bt_21_real_time.int_dispensary_retail": ["model.bt_21_real_time.retail_transaction_detail", "test.bt_21_real_time.dbt_utils_recency_int_dispensary_retail_day__extract_date__1.61bd0e844d", "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_dispensary_retail_org__location.fa1b7a4c7f", "test.bt_21_real_time.not_null_int_dispensary_retail_location.6ec4b98561", "test.bt_21_real_time.not_null_int_dispensary_retail_org.edfac1204e", "test.bt_21_real_time.table_is_empty_int_dispensary_retail_.6b350fd05c"], "model.bt_21_real_time.int_customers_retail": ["model.bt_21_real_time.retail_transaction_detail"], "model.bt_21_real_time.retail_transaction_detail": ["model.bt_21_real_time.retail_dispensary_all_views", "test.bt_21_real_time.dbt_utils_recency_retail_transaction_detail_day__datetime_timestamp__1.17b25e32b7", "test.bt_21_real_time.dbt_utils_recency_retail_transaction_detail_day__extract_date__1.7194b5d7cc", "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_retail_transaction_detail_source_dispensary_org_id__source_dispensary_location_id__saleid.6ac532851f", "test.bt_21_real_time.not_null_retail_transaction_detail_saleid.64e773ed0b", "test.bt_21_real_time.table_is_empty_retail_transaction_detail_.4cfe41e17a"], "model.bt_21_real_time.retail_dispensary_all_views": [], "test.bt_21_real_time.not_null_stg_customers_retail_customerid.9ff3b43521": [], "test.bt_21_real_time.not_null_stg_customers_retail_org.253f904950": [], "test.bt_21_real_time.not_null_stg_customers_retail_location.49f36794af": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_customers_retail_org__location__customerid.e1fb7d6a94": [], "test.bt_21_real_time.table_is_empty_stg_customers_retail_.ff7c636081": [], "test.bt_21_real_time.dbt_utils_recency_stg_customers_retail_day__extract_date__1.03d2719bfe": [], "test.bt_21_real_time.dbt_utils_recency_stg_customers_retail_day__created__1.fdc943d26a": [], "test.bt_21_real_time.not_null_stg_inventory_retail_id.7c9e00423f": [], "test.bt_21_real_time.not_null_stg_inventory_retail_location.55782909d4": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventory_retail_org__location__id.539731e71c": [], "test.bt_21_real_time.table_is_empty_stg_inventory_retail_.0a8bc5858b": [], "test.bt_21_real_time.dbt_utils_recency_stg_inventory_retail_day__extract_date__1.e6a9694bba": [], "test.bt_21_real_time.dbt_utils_recency_stg_inventory_retail_day__sessiontime_timestamp__1.4da9d5f636": [], "test.bt_21_real_time.not_null_stg_inventorylogs_retail_logid.f009d09a1c": [], "test.bt_21_real_time.not_null_stg_inventorylogs_retail_inventoryid.736e98b0c7": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventorylogs_retail_org__location__inventoryid.f3b318625a": [], "test.bt_21_real_time.table_is_empty_stg_inventorylogs_retail_.ede3491614": [], "test.bt_21_real_time.dbt_utils_recency_stg_inventorylogs_retail_day__extract_date__1.c80db2c2fa": [], "test.bt_21_real_time.dbt_utils_recency_stg_inventorylogs_retail_day__sessiontime_timestamp__1.7fd0669391": [], "test.bt_21_real_time.not_null_stg_inventory_rooms_retail_id.504fc91af6": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventory_rooms_retail_org__id.5e24e4312f": [], "test.bt_21_real_time.table_is_empty_stg_inventory_rooms_retail_.207a4e8cfd": [], "test.bt_21_real_time.dbt_utils_recency_stg_inventory_rooms_retail_day__extract_date__1.cd63107e56": [], "test.bt_21_real_time.not_null_stg_inventorytypes_retail_id.22e56b513c": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventorytypes_retail_org__id.3c502bbaf0": [], "test.bt_21_real_time.table_is_empty_stg_inventorytypes_retail_.81dbf99bb5": [], "test.bt_21_real_time.dbt_utils_recency_stg_inventorytypes_retail_day__extract_date__1.14b2d45a77": [], "test.bt_21_real_time.not_null_stg_locations_retail_location.2acb349222": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_locations_retail_org__location.18e2e8ef35": [], "test.bt_21_real_time.table_is_empty_stg_locations_retail_.151aec3eb4": [], "test.bt_21_real_time.dbt_utils_recency_stg_locations_retail_day__extract_date__1.6a6d76302e": [], "test.bt_21_real_time.not_null_stg_payments_retail_ticketid.aec60dcd60": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_payments_retail_org__location__ticketid.e622a84b75": [], "test.bt_21_real_time.table_is_empty_stg_payments_retail_.4b1740aa92": [], "test.bt_21_real_time.dbt_utils_recency_stg_payments_retail_day__extract_date__1.b5cdc6ee57": [], "test.bt_21_real_time.not_null_stg_product_categories_retail_product_categories_id.75b1ab44b6": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_product_categories_retail_org__location__product_categories_id.66859d1473": [], "test.bt_21_real_time.table_is_empty_stg_product_categories_retail_.7e5f962247": [], "test.bt_21_real_time.dbt_utils_recency_stg_product_categories_retail_day__extract_date__1.f7028b0373": [], "test.bt_21_real_time.not_null_stg_products_retail_productid.04cc83f906": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_products_retail_org__productid.b104fe6137": [], "test.bt_21_real_time.table_is_empty_stg_products_retail_.5948848e4b": [], "test.bt_21_real_time.dbt_utils_recency_stg_products_retail_day__extract_date__1.0a22e661ef": [], "test.bt_21_real_time.dbt_utils_recency_stg_products_retail_day__created__1.f888efd9d6": [], "test.bt_21_real_time.not_null_stg_productslogs_retail_logid.3e605a877d": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_productslogs_retail_logid__org__location__productid.cc5aa84621": [], "test.bt_21_real_time.table_is_empty_stg_productslogs_retail_.84d4e26014": [], "test.bt_21_real_time.dbt_utils_recency_stg_productslogs_retail_day__extract_date__1.68e395fbef": [], "test.bt_21_real_time.dbt_utils_recency_stg_productslogs_retail_day__sessiontime_timestamp__1.b404cce0ba": [], "test.bt_21_real_time.not_null_stg_sales_retail_saleid.f2fb626ea2": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_sales_retail_org__location__saleid.b086e8f2b4": [], "test.bt_21_real_time.table_is_empty_stg_sales_retail_.27dda28ce1": [], "test.bt_21_real_time.dbt_utils_recency_stg_sales_retail_day__extract_date__1.b63e65ef66": [], "test.bt_21_real_time.dbt_utils_recency_stg_sales_retail_day__datetime_timestamp__1.e6fcad5cf7": [], "test.bt_21_real_time.not_null_stg_taxcategories_retail_id.b37d1053e2": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_taxcategories_retail_org__id.71d77f46b2": [], "test.bt_21_real_time.table_is_empty_stg_taxcategories_retail_.a89ef8e918": [], "test.bt_21_real_time.dbt_utils_recency_stg_taxcategories_retail_day__extract_date__1.b9c62ef088": [], "test.bt_21_real_time.not_null_stg_tickets_retail_ticketid.7bd0c2aa19": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_tickets_retail_org__location__ticketid.d8c7e5341c": [], "test.bt_21_real_time.table_is_empty_stg_tickets_retail_.928947c9f7": [], "test.bt_21_real_time.dbt_utils_recency_stg_tickets_retail_day__extract_date__1.8d4059b82b": [], "test.bt_21_real_time.dbt_utils_recency_stg_tickets_retail_day__datetime_timestamp__1.50d1b8dbf3": [], "test.bt_21_real_time.not_null_stg_vendors_retail_vendorid.f5ce535da5": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_vendors_retail_org__vendorid.d955ded1d3": [], "test.bt_21_real_time.table_is_empty_stg_vendors_retail_.b73365198a": [], "test.bt_21_real_time.dbt_utils_recency_stg_vendors_retail_day__extract_date__1.2efc2f2964": [], "test.bt_21_real_time.not_null_stg_customers_trace_customerid.ad58f59388": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_customers_trace_location__customerid.425f226e05": [], "test.bt_21_real_time.table_is_empty_stg_customers_trace_.de2e65e7cd": [], "test.bt_21_real_time.dbt_utils_recency_stg_customers_trace_day__extract_date__1.a309df89ff": [], "test.bt_21_real_time.dbt_utils_recency_stg_customers_trace_day__created__1.79677c88ba": [], "test.bt_21_real_time.not_null_stg_inventory_trace_id.4e6d17da99": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventory_trace_location__id__productid.e9b7d26047": [], "test.bt_21_real_time.table_is_empty_stg_inventory_trace_.7a170e09c3": [], "test.bt_21_real_time.dbt_utils_recency_stg_inventory_trace_day__extract_date__1.263c484ea8": [], "test.bt_21_real_time.dbt_utils_recency_stg_inventory_trace_day__sessiontime_timestamp__1.23351f2e08": [], "test.bt_21_real_time.not_null_stg_inventorylog_trace_id.c24cae614d": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_inventorylog_trace_location__id.9b2ae5962c": [], "test.bt_21_real_time.table_is_empty_stg_inventorylog_trace_.d09e4f04cd": [], "test.bt_21_real_time.dbt_utils_recency_stg_inventorylog_trace_day__extract_date__1.e5e7d3cf71": [], "test.bt_21_real_time.dbt_utils_recency_stg_inventorylog_trace_day__sessiontime_timestamp__1.4f3e15d4b6": [], "test.bt_21_real_time.not_null_stg_inventorytypes_trace_id.25b47e5150": [], "test.bt_21_real_time.unique_stg_inventorytypes_trace_id.c8a3c00687": [], "test.bt_21_real_time.table_is_empty_stg_inventorytypes_trace_.5b07f1eeaa": [], "test.bt_21_real_time.dbt_utils_recency_stg_inventorytypes_trace_day__extract_date__1.789ef1fd0c": [], "test.bt_21_real_time.not_null_stg_locations_trace_location.b4a594d766": [], "test.bt_21_real_time.unique_stg_locations_trace_location.a5ee270223": [], "test.bt_21_real_time.table_is_empty_stg_locations_trace_.64edbb7401": [], "test.bt_21_real_time.dbt_utils_recency_stg_locations_trace_day__extract_date__1.ec3bc61dfd": [], "test.bt_21_real_time.not_null_stg_refunds_trace_transactionid_original.1740459e22": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_refunds_trace_location__transactionid_original.d6b7c7409e": [], "test.bt_21_real_time.table_is_empty_stg_refunds_trace_.f47184009e": [], "test.bt_21_real_time.dbt_utils_recency_stg_refunds_trace_day__extract_date__1.a76ff53791": [], "test.bt_21_real_time.not_null_stg_sales_trace_saleid.da28768a91": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_stg_sales_trace_location__saleid.9616ef181a": [], "test.bt_21_real_time.table_is_empty_stg_sales_trace_.9532c1f574": [], "test.bt_21_real_time.dbt_utils_recency_stg_sales_trace_day__extract_date__1.cebabdf998": [], "test.bt_21_real_time.dbt_utils_recency_stg_sales_trace_day__sessiontime_timestamp__1.0b3cacf91f": [], "test.bt_21_real_time.not_null_int_dispensary_retail_org.edfac1204e": [], "test.bt_21_real_time.not_null_int_dispensary_retail_location.6ec4b98561": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_dispensary_retail_org__location.fa1b7a4c7f": [], "test.bt_21_real_time.table_is_empty_int_dispensary_retail_.6b350fd05c": [], "test.bt_21_real_time.dbt_utils_recency_int_dispensary_retail_day__extract_date__1.61bd0e844d": [], "test.bt_21_real_time.not_null_int_inventory_retail_inventoryid.4a68ec3f34": [], "test.bt_21_real_time.not_null_int_inventory_retail_productid.2f0ede2d15": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_inventory_retail_org__inventoryid__productid.89fe89e73f": [], "test.bt_21_real_time.table_is_empty_int_inventory_retail_.c137b3c6c3": [], "test.bt_21_real_time.dbt_utils_recency_int_inventory_retail_day__extract_date__1.3746bd1b68": [], "test.bt_21_real_time.dbt_utils_recency_int_inventory_retail_day__sessiontime_timestamp__1.68ed70a06f": [], "test.bt_21_real_time.not_null_int_product_inventory_retail_inventoryid.453555db4a": [], "test.bt_21_real_time.not_null_int_product_inventory_retail_productid.6c97ca0f64": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_product_inventory_retail_org__inventoryid__productid.1a575e0044": [], "test.bt_21_real_time.table_is_empty_int_product_inventory_retail_.3101b8cd73": [], "test.bt_21_real_time.dbt_utils_recency_int_product_inventory_retail_day__extract_date__1.e65206ce33": [], "test.bt_21_real_time.dbt_utils_recency_int_product_inventory_retail_day__sessiontime_timestamp__1.798d7d0e8c": [], "test.bt_21_real_time.not_null_int_products_retail_productid.bd99edf342": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_products_retail_org__location__productid.ea86d6d926": [], "test.bt_21_real_time.table_is_empty_int_products_retail_.cb341b615a": [], "test.bt_21_real_time.dbt_utils_recency_int_products_retail_day__extract_date__1.f1087aa076": [], "test.bt_21_real_time.dbt_utils_recency_int_products_retail_day__created__1.478abb364d": [], "test.bt_21_real_time.not_null_int_sales_retail_saleid.7f2a3ca838": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_sales_retail_org__location__saleid.041f8a4648": [], "test.bt_21_real_time.table_is_empty_int_sales_retail_.84e7595f5d": [], "test.bt_21_real_time.dbt_utils_recency_int_sales_retail_day__extract_date__1.166aa57288": [], "test.bt_21_real_time.dbt_utils_recency_int_sales_retail_day__datetime_timestamp__1.fa0e017468": [], "test.bt_21_real_time.not_null_int_dispensary_trace_location.9185421992": [], "test.bt_21_real_time.unique_int_dispensary_trace_location.4cab66fd66": [], "test.bt_21_real_time.table_is_empty_int_dispensary_trace_.0de2b9587f": [], "test.bt_21_real_time.dbt_utils_recency_int_dispensary_trace_day__extract_date__1.47556ecee7": [], "test.bt_21_real_time.not_null_int_products_trace_productid.5b63f54130": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_products_trace_location__productid.580c936afa": [], "test.bt_21_real_time.table_is_empty_int_products_trace_.ed9da0d906": [], "test.bt_21_real_time.dbt_utils_recency_int_products_trace_day__extract_date__1.54ab5d415e": [], "test.bt_21_real_time.dbt_utils_recency_int_products_trace_day__sessiontime_timestamp__1.89eafb62cf": [], "test.bt_21_real_time.not_null_int_sales_trace_saleid.b593dc708a": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_int_sales_trace_location__saleid.902ce16c07": [], "test.bt_21_real_time.table_is_empty_int_sales_trace_.7dd7ddab02": [], "test.bt_21_real_time.dbt_utils_recency_int_sales_trace_day__extract_date__1.c5379783f7": [], "test.bt_21_real_time.dbt_utils_recency_int_sales_trace_day__sessiontime_timestamp__1.d287aa9de6": [], "test.bt_21_real_time.not_null_retail_customer_dispensary_facts_customer_id.8c8c863224": [], "test.bt_21_real_time.not_null_retail_dispensary_all_view_dispensary_id.4d8d54dd9d": [], "test.bt_21_real_time.unique_retail_dispensary_all_view_dispensary_id.d3315173f7": [], "test.bt_21_real_time.table_is_empty_retail_dispensary_all_view_.d4129b88cf": [], "test.bt_21_real_time.dbt_utils_recency_retail_dispensary_all_view_day__extract_date__1.11bbac11ed": [], "test.bt_21_real_time.not_null_retail_product_inventory_guid_product_inventory.9813178e2e": [], "test.bt_21_real_time.unique_retail_product_inventory_guid_product_inventory.3047ccd2ce": [], "test.bt_21_real_time.table_is_empty_retail_product_inventory_.27147de65f": [], "test.bt_21_real_time.dbt_utils_recency_retail_product_inventory_day__extract_date__1.9cfc62efaa": [], "test.bt_21_real_time.dbt_utils_recency_retail_product_inventory_day__sessiontime_timestamp__1.899f29dcc4": [], "test.bt_21_real_time.not_null_retail_transaction_detail_saleid.64e773ed0b": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_retail_transaction_detail_source_dispensary_org_id__source_dispensary_location_id__saleid.6ac532851f": [], "test.bt_21_real_time.table_is_empty_retail_transaction_detail_.4cfe41e17a": [], "test.bt_21_real_time.dbt_utils_recency_retail_transaction_detail_day__extract_date__1.7194b5d7cc": [], "test.bt_21_real_time.dbt_utils_recency_retail_transaction_detail_day__datetime_timestamp__1.17b25e32b7": [], "test.bt_21_real_time.not_null_trace_customer_dispensary_facts_customer_id.ac84eae0de": [], "test.bt_21_real_time.not_null_trace_transaction_detail_saleid.ce342debb1": [], "test.bt_21_real_time.dbt_utils_unique_combination_of_columns_trace_transaction_detail_source_dispensary_location_id__saleid.83564fd882": [], "test.bt_21_real_time.table_is_empty_trace_transaction_detail_.a4bf225c11": [], "test.bt_21_real_time.dbt_utils_recency_trace_transaction_detail_day__extract_date__1.a7c26eec2a": [], "test.bt_21_real_time.dbt_utils_recency_trace_transaction_detail_day__sessiontime_timestamp__1.d450d85f42": [], "source.bt_21_real_time.postgres_cann_replication_public.bmsi_customers_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.bmsi_dispensing_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.bmsi_locations_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.bmsi_inventory_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.log_bmsi_inventory_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.bmsi_inventoryrooms_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.bmsi_inventorytypes_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.customers_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.conditions_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.discounts_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.inventorylog_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.inventory_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.inventoryrooms_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.inventorytypes_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.locations_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.location_type_desc": [], "source.bt_21_real_time.postgres_cann_replication_public.org": [], "source.bt_21_real_time.postgres_cann_replication_public.payments_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.perfs_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.productcategories_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.productslog_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.products_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.rooms_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.sales_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.taxcategories_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.tickets_raw": [], "source.bt_21_real_time.postgres_cann_replication_public.vendors_raw": []}}